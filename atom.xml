<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hldh214&#39;s blog</title>
  
  <subtitle>戎码一生</subtitle>
  <link href="https://hldh214.github.io/atom.xml" rel="self"/>
  
  <link href="https://hldh214.github.io/"/>
  <updated>2022-02-07T09:11:38.511Z</updated>
  <id>https://hldh214.github.io/</id>
  
  <author>
    <name>Jim</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>磁盘扩容二三事</title>
    <link href="https://hldh214.github.io/resize-filesystem-fdisk-resize2fs/"/>
    <id>https://hldh214.github.io/resize-filesystem-fdisk-resize2fs/</id>
    <published>2021-11-20T15:22:12.000Z</published>
    <updated>2022-02-07T09:11:38.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>一晃又是一年过去了, 不禁感慨病毒发生前的时代是什么样的? 已经渐渐模糊了.<br>那么言归正传, 今天我们来聊一聊 Linux 下磁盘扩容的事情.<br>我们的需求是一个固定大小(200MB)的 <code>img</code> 文件需要 <code>dd</code> 进 SD 卡做嵌入式设备的启动盘, 之前为了图方便直接把 <code>img</code> 文件扩容到足够大(2GB)来节省后面给 SD 卡做分区的操作, 后来发现这样偷懒有一个问题, 就是 <code>dd</code> 的时间太久了, 所以得把之前偷掉的懒补回来.<br>本来吧, 这事情放 Windows 不到半分钟就解决了, 离开了图形化界面问题一下子就多了起来, 故有此文以记录我的亲历.</p><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="一些基本命令"><a href="#一些基本命令" class="headerlink" title="一些基本命令"></a>一些基本命令</h2><p>开局直接一顿 Google 先恶补一下相关命令的基本使用方法: <code>fdisk, mount, umount, e2fsck, resize2fs, parted, ......</code><br>然后信心满满开始操刀, 这里为了方便就以本地虚拟化一块磁盘来代替 SD 卡.<br>我们的基本逻辑是直接 <code>dd</code> 未扩容的 <code>img</code> 文件进磁盘, 然后再给磁盘做扩容处理, 这样可以兼顾速度跟容量.</p><h2 id="DD"><a href="#DD" class="headerlink" title="DD"></a>DD</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@vm ~]# dd if=sdcard.img of=/dev/sdb bs=256K status=progress</span><br><span class="line">232783872 bytes (233 MB, 222 MiB) copied, 1 s, 233 MB/s</span><br><span class="line">928+1 records in</span><br><span class="line">928+1 records out</span><br><span class="line">243270144 bytes (243 MB, 232 MiB) copied, 1.1339 s, 215 MB/s</span><br></pre></td></tr></table></figure><p>SSD 速度还是很给力的, 秒完成, 那么我们看一下目前的分区情况.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">[root@vm ~]# fdisk -l</span><br><span class="line">Disk /dev/loop0: 61.83 MiB, 64835584 bytes, 126632 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop1: 73.18 MiB, 76734464 bytes, 149872 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop2: 32.31 MiB, 33878016 bytes, 66168 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 2 GiB, 2147483648 bytes, 4194304 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">Device     Boot Start    End Sectors  Size Id Type</span><br><span class="line">/dev/sdb1  *        1  65536   65536   32M  c W95 FAT32 (LBA)</span><br><span class="line">/dev/sdb2       65537 475136  409600  200M 83 Linux</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 20 GiB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: gpt</span><br><span class="line">Disk identifier: 4F59C0B8-3AA0-4C5D-883E-9CC503529107</span><br><span class="line"></span><br><span class="line">Device       Start      End  Sectors Size Type</span><br><span class="line">/dev/sda1     2048     4095     2048   1M BIOS boot</span><br><span class="line">/dev/sda2     4096  2101247  2097152   1G Linux filesystem</span><br><span class="line">/dev/sda3  2101248 41940991 39839744  19G Linux filesystem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/ubuntu--vg-ubuntu--lv: 19 GiB, 20396900352 bytes, 39837696 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure><p>可以看到 <code>/dev/sdb</code> 这块磁盘的容量是 2G, 但是因为 <code>dd</code> 进去的 <code>img</code> 只有两百多兆, 导致剩余的容量成为了未分配空间.</p><h2 id="重新分区"><a href="#重新分区" class="headerlink" title="重新分区"></a>重新分区</h2><h3 id="删除旧分区"><a href="#删除旧分区" class="headerlink" title="删除旧分区"></a>删除旧分区</h3><p>首先想到的是老牌的 <code>fdisk</code> 工具, 一顿操作.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[root@vm ~]# fdisk /dev/sdb</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.36.1).</span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command (m for help): p</span><br><span class="line">Disk /dev/sdb: 2 GiB, 2147483648 bytes, 4194304 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">Device     Boot Start    End Sectors  Size Id Type</span><br><span class="line">/dev/sdb1  *        1  65536   65536   32M  c W95 FAT32 (LBA)</span><br><span class="line">/dev/sdb2       65537 475136  409600  200M 83 Linux</span><br><span class="line"></span><br><span class="line">Command (m for help): d</span><br><span class="line">Partition number (1,2, default 2): 2</span><br><span class="line"></span><br><span class="line">Partition 2 has been deleted.</span><br><span class="line"></span><br><span class="line">Command (m for help): p</span><br><span class="line">Disk /dev/sdb: 2 GiB, 2147483648 bytes, 4194304 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">Device     Boot Start   End Sectors Size Id Type</span><br><span class="line">/dev/sdb1  *        1 65536   65536  32M  c W95 FAT32 (LBA)</span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure><p>没问题, 这个两百多兆的分区成功被我们删除了, 我们继续.</p><h3 id="新建分区"><a href="#新建分区" class="headerlink" title="新建分区"></a>新建分区</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@vm ~]# fdisk /dev/sdb</span><br><span class="line"></span><br><span class="line">Welcome to fdisk (util-linux 2.36.1).</span><br><span class="line">Changes will remain in memory only, until you decide to write them.</span><br><span class="line">Be careful before using the write command.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command (m for help): n</span><br><span class="line">Partition type</span><br><span class="line">   p   primary (1 primary, 0 extended, 3 free)</span><br><span class="line">   e   extended (container for logical partitions)</span><br><span class="line">Select (default p):</span><br><span class="line"></span><br><span class="line">Using default response p.</span><br><span class="line">Partition number (2-4, default 2):</span><br><span class="line">First sector (65537-4194303, default 67584): 65537</span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (65537-4194303, default 4194303):</span><br><span class="line"></span><br><span class="line">Created a new partition 2 of type &#x27;Linux&#x27; and of size 2 GiB.</span><br><span class="line">Partition #2 contains a ext4 signature.</span><br><span class="line"></span><br><span class="line">Do you want to remove the signature? [Y]es/[N]o: y</span><br><span class="line"></span><br><span class="line">The signature will be removed by a write command.</span><br><span class="line"></span><br><span class="line">Command (m for help): p</span><br><span class="line">Disk /dev/sdb: 2 GiB, 2147483648 bytes, 4194304 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">Device     Boot Start     End Sectors Size Id Type</span><br><span class="line">/dev/sdb1  *        1   65536   65536  32M  c W95 FAT32 (LBA)</span><br><span class="line">/dev/sdb2       65537 4194303 4128767   2G 83 Linux</span><br><span class="line"></span><br><span class="line">Filesystem/RAID signature on partition 2 will be wiped.</span><br><span class="line"></span><br><span class="line">Command (m for help): w</span><br><span class="line">The partition table has been altered.</span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br></pre></td></tr></table></figure><p>这里其实有一个坑, 就是 <code>fdisk</code> 在新建分区的时候, 默认的起始柱面有可能是不对的.<br>细心的同学应该也发现了, 我并没有采用给到的默认值 <code>67584</code>, 而是根据上面打印出来的分区表的起始柱面来填写的 <code>65537</code> 这个值, 这个地方我第一次尝试的时候就掉坑里了.</p><h2 id="修复-filesystem"><a href="#修复-filesystem" class="headerlink" title="修复 filesystem"></a>修复 <code>filesystem</code></h2><p>目前为止我们只是搞定了分区表, 实际上 <code>filesystem</code> 还是原来的样子, 但其实我们离成功已经不远了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">[root@vm ~]# e2fsck -f /dev/sdb2</span><br><span class="line">e2fsck 1.46.3 (27-Jul-2021)</span><br><span class="line">ext2fs_open2: Bad magic number in super-block</span><br><span class="line">e2fsck: Superblock invalid, trying backup blocks...</span><br><span class="line">Pass 1: Checking inodes, blocks, and sizes</span><br><span class="line">Pass 2: Checking directory structure</span><br><span class="line">Pass 3: Checking directory connectivity</span><br><span class="line">Pass 3A: Optimizing directories</span><br><span class="line">Pass 4: Checking reference counts</span><br><span class="line">Pass 5: Checking group summary information</span><br><span class="line">Padding at end of inode bitmap is not set. Fix&lt;y&gt;? yes</span><br><span class="line"></span><br><span class="line">/dev/sdb2: ***** FILE SYSTEM WAS MODIFIED *****</span><br><span class="line">/dev/sdb2: 5811/51200 files (0.5% non-contiguous), 178100/204800 blocks</span><br><span class="line"></span><br><span class="line">[root@vm ~]# resize2fs /dev/sdb2</span><br><span class="line">resize2fs 1.46.3 (27-Jul-2021)</span><br><span class="line">Resizing the filesystem on /dev/sdb2 to 2064380 (1k) blocks.</span><br><span class="line">The filesystem on /dev/sdb2 is now 2064380 (1k) blocks long.</span><br><span class="line"></span><br><span class="line">[root@vm ~]# fdisk -l</span><br><span class="line">Disk /dev/loop0: 61.83 MiB, 64835584 bytes, 126632 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop1: 73.18 MiB, 76734464 bytes, 149872 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/loop2: 32.31 MiB, 33878016 bytes, 66168 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 2 GiB, 2147483648 bytes, 4194304 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">Device     Boot Start     End Sectors Size Id Type</span><br><span class="line">/dev/sdb1  *        1   65536   65536  32M  c W95 FAT32 (LBA)</span><br><span class="line">/dev/sdb2       65537 4194303 4128767   2G 83 Linux</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 20 GiB, 21474836480 bytes, 41943040 sectors</span><br><span class="line">Disk model: VMware Virtual S</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: gpt</span><br><span class="line">Disk identifier: 4F59C0B8-3AA0-4C5D-883E-9CC503529107</span><br><span class="line"></span><br><span class="line">Device       Start      End  Sectors Size Type</span><br><span class="line">/dev/sda1     2048     4095     2048   1M BIOS boot</span><br><span class="line">/dev/sda2     4096  2101247  2097152   1G Linux filesystem</span><br><span class="line">/dev/sda3  2101248 41940991 39839744  19G Linux filesystem</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/ubuntu--vg-ubuntu--lv: 19 GiB, 20396900352 bytes, 39837696 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br></pre></td></tr></table></figure><p>Voila! 此时才算大功告成, 顺便说一下如果上面新建分区那一步如果起始柱面填错了的话, 这里就会报错 <code>Bad magic number in super-block</code>.</p><h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p><a href="https://geekpeek.net/resize-filesystem-fdisk-resize2fs/">https://geekpeek.net/resize-filesystem-fdisk-resize2fs/</a><br><a href="https://www.cnblogs.com/tssc/p/9175106.html">https://www.cnblogs.com/tssc/p/9175106.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;一晃又是一年过去了, 不禁感慨病毒发生前的时代是什么样的? 已经渐渐模糊了.&lt;br&gt;那么言归正传, 今天我们来聊一聊 Linux 下磁盘扩容的事情.&lt;br&gt;我们的需求是一个固定大小(200MB)的 &lt;code&gt;img&lt;/code&gt; 文件需要 &lt;code&gt;dd&lt;/code&gt; 进 SD 卡做嵌入式设备的启动盘, 之前为了图方便直接把 &lt;code&gt;img&lt;/code&gt; 文件扩容到足够大(2GB)来节省后面给 SD 卡做分区的操作, 后来发现这样偷懒有一个问题, 就是 &lt;code&gt;dd&lt;/code&gt; 的时间太久了, 所以得把之前偷掉的懒补回来.&lt;br&gt;本来吧, 这事情放 Windows 不到半分钟就解决了, 离开了图形化界面问题一下子就多了起来, 故有此文以记录我的亲历.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://hldh214.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>你这个态度还找个锤子的工作</title>
    <link href="https://hldh214.github.io/infipower-interview-0219/"/>
    <id>https://hldh214.github.io/infipower-interview-0219/</id>
    <published>2021-03-19T08:47:34.000Z</published>
    <updated>2022-02-07T09:03:13.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>今天跟大家分享两道面试遇到的题目, 因为觉得比较有特色, 故写成博客以供后人笑话.<br>为什么说这两道题比较有特色呢, 主要还是因为在国内这种环境已经很难见到直接 Google 不出来答案的题目了.<br>而且这两道题难度适中, 连我这样的人都能照着答案抄, 还能看懂答案, 属实不容易.</p><span id="more"></span><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="Least-wasteful-use-of-stamps-to-achieve-a-given-postage"><a href="#Least-wasteful-use-of-stamps-to-achieve-a-given-postage" class="headerlink" title="Least wasteful use of stamps to achieve a given postage"></a>Least wasteful use of stamps to achieve a given postage</h2><blockquote><p>we have 2 kinds of stamp with values $A and $B, The number of stamps is infinite, we have a letter to send out and need $T postage, question is to find out the lowest cost required to get $T postage? Pls describe your method and code it with any language you are good at( even we perfer C&#x2F;C++ :）。 </p></blockquote><blockquote><p>example as below, </p></blockquote><blockquote><p>Input：A B T<br>1 ≤ A &lt; B ≤ 10e9<br>1 ≤ T ≤ 10e9<br>A, B, T are integers </p></blockquote><blockquote><p>Output： The lowest value of 2 kinds of stamps combination which should be &gt;&#x3D; $T</p></blockquote><p>上来就是一道洋文题, 咋一看以为是背包问题, 仔细一看果然是背包问题, 随便在网上搜了个答案抄作业了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yet_another_solution</span>(<span class="params">a, b, t</span>):</span><br><span class="line">    n = math.ceil(t / b)</span><br><span class="line">    cost = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">        j = math.ceil((t - i * b) / a)</span><br><span class="line">        cost.append(&#123;<span class="string">&#x27;cost&#x27;</span>: i * b + j * a, <span class="string">&#x27;num_of_a&#x27;</span>: j, <span class="string">&#x27;num_of_b&#x27;</span>: i&#125;)</span><br><span class="line"></span><br><span class="line">    cost.sort(key=<span class="keyword">lambda</span> x: x.get(<span class="string">&#x27;cost&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cost[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>然后面试官发来追问</p><blockquote><p>你好，循环是可以这样做的，那我再追问下， A,　B比较小， T比较大的时候，在小的Embedded设备上耗时比较多，请问有没有好的办法可以加速？</p></blockquote><p>没什么头绪, 继续漫无目的的遨游互联网, 查到一个大学的 <a href="http://jwilson.coe.uga.edu/emt725/Stamps/TwoStamp.html">assignment</a> 有一题跟这个追问很类似.<br>果断朝着这个方向继续搜答案, 然后就查到了另一个与之相关的<a href="https://en.wikipedia.org/wiki/Coin_problem">问题</a>.<br>根据相关资料以及面试官的 <strong>一些点拨</strong> 写出最终代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yet_another_solution</span>(<span class="params">a, b, t</span>):</span><br><span class="line">    n = math.ceil(t / b)</span><br><span class="line">    cost = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>):</span><br><span class="line">        j = math.ceil((t - i * b) / a)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># fix negative number issue</span></span><br><span class="line">        <span class="keyword">if</span> j &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        cost.append(&#123;<span class="string">&#x27;cost&#x27;</span>: i * b + j * a, <span class="string">&#x27;num_of_a&#x27;</span>: j, <span class="string">&#x27;num_of_b&#x27;</span>: i&#125;)</span><br><span class="line"></span><br><span class="line">    cost.sort(key=<span class="keyword">lambda</span> x: x.get(<span class="string">&#x27;cost&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cost[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">a, b, t</span>):</span><br><span class="line">    gcd = math.gcd(a, b)</span><br><span class="line">    is_co_prime = (gcd == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> is_co_prime:</span><br><span class="line">        mystery_number = a * b - a - b</span><br><span class="line">        <span class="keyword">if</span> mystery_number &lt; t:</span><br><span class="line">            <span class="comment"># Coin problem optimization</span></span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> b % a:</span><br><span class="line">            <span class="comment"># A ÷ B ∈ ℤ optimization</span></span><br><span class="line">            num_of_a = math.ceil(t / a)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> t % a:</span><br><span class="line">                <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> num_of_a * a</span><br><span class="line"></span><br><span class="line">        <span class="comment"># A ÷ B ∉ ℤ case</span></span><br><span class="line">        <span class="comment"># @see https://math.stackexchange.com/q/3430648</span></span><br><span class="line">        mystery_number = ((a * b) / gcd ** <span class="number">2</span> - (a + b) / gcd + <span class="number">1</span>) * gcd</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mystery_number &lt; t:</span><br><span class="line">            num_of_a = math.ceil(t / gcd)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> t % gcd:</span><br><span class="line">                <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> num_of_a * gcd</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> yet_another_solution(a, b, t).get(<span class="string">&#x27;cost&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(main(<span class="number">29</span>, <span class="number">42</span>, <span class="number">320</span>))</span><br></pre></td></tr></table></figure><h2 id="最多能换几张免费机票"><a href="#最多能换几张免费机票" class="headerlink" title="最多能换几张免费机票"></a>最多能换几张免费机票</h2><blockquote><p>你经常做飞机，现持有国航5种Coupon状况如下<br>种类 A 的 a 张<br>种类 B 的 b 张<br>种类 C 的 c 张<br>种类 D 的 d 张<br>种类 E 的 e 张 </p></blockquote><blockquote><p>你想换一张免费机票，条件如下<br>种类 A, B, C 的Coupon各一张 或者<br>种类 B, C, D 的Coupon各一张 或者<br>种类 C, D, E 的Coupon各一张 或者<br>种类 D, E, A 的Coupon各一张 或者<br>种类 E, A, B 的Coupon各一张 </p></blockquote><blockquote><p>问最多能换几张免费机票？<br>Input a, b, c, d, e      Output 免费机票数</p></blockquote><p>这题一开始我是完全没思路的, 连 Google 关键字都想不出来, 后面求助万能的网友得到一个答案, 果断抄作业</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greedy</span>(<span class="params">a, b, c, d, e</span>):</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    coupons = [a, b, c, d, e]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_max</span>(<span class="params">_x, _y, _z</span>):</span><br><span class="line">        _n = <span class="built_in">min</span>(_x, _y, _z)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _x - _n, _y - _n, _z - _n, _n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (x, y, z) <span class="keyword">in</span> (</span><br><span class="line">            (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">            (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">            (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),</span><br><span class="line">            (<span class="number">3</span>, <span class="number">4</span>, <span class="number">0</span>),</span><br><span class="line">            (<span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>),</span><br><span class="line">    ):</span><br><span class="line">        coupons[x], coupons[y], coupons[z], n = get_max(coupons[x], coupons[y], coupons[z])</span><br><span class="line">        result += n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>大佬不愧是大佬, 这写法一看就是老刷题家了, 提交给面试官, 得到这么个追问</p><blockquote><p>面: 你好，看了看，有点问题，你自己能发现吗？<br>我: 可以稍微提示一下吗.<br>面: 试试 全都是10的输入<br>我: 原来如此，我思考一下。</p></blockquote><p>不过此时的我已经是站在巨人的肩膀上了, 面试官也没太为难, 直接给我不通过的 case, 快速写出对应的修复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">yet_another_solution</span>(<span class="params">a, b, c, d, e, result=<span class="number">0</span></span>):</span><br><span class="line">    coupons = [a, b, c, d, e]</span><br><span class="line">    length = <span class="number">5</span></span><br><span class="line">    score_list = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        y = x + <span class="number">1</span> <span class="keyword">if</span> x + <span class="number">1</span> &lt; length <span class="keyword">else</span> x + <span class="number">1</span> - length</span><br><span class="line">        z = y + <span class="number">1</span> <span class="keyword">if</span> y + <span class="number">1</span> &lt; length <span class="keyword">else</span> y + <span class="number">1</span> - length</span><br><span class="line"></span><br><span class="line">        score_list.append(&#123;</span><br><span class="line">            <span class="string">&#x27;score&#x27;</span>: <span class="built_in">sum</span>((coupons[x], coupons[y], coupons[z])),</span><br><span class="line">            <span class="string">&#x27;first&#x27;</span>: &#123;<span class="string">&#x27;index&#x27;</span>: x, <span class="string">&#x27;value&#x27;</span>: coupons[x]&#125;,</span><br><span class="line">            <span class="string">&#x27;second&#x27;</span>: &#123;<span class="string">&#x27;index&#x27;</span>: y, <span class="string">&#x27;value&#x27;</span>: coupons[y]&#125;,</span><br><span class="line">            <span class="string">&#x27;third&#x27;</span>: &#123;<span class="string">&#x27;index&#x27;</span>: z, <span class="string">&#x27;value&#x27;</span>: coupons[z]&#125;,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    score_list.sort(key=<span class="keyword">lambda</span> x: x.get(<span class="string">&#x27;score&#x27;</span>), reverse=<span class="literal">True</span>)</span><br><span class="line">    top_3_set = score_list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> each_token <span class="keyword">in</span> [<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;second&#x27;</span>, <span class="string">&#x27;third&#x27;</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> top_3_set[each_token][<span class="string">&#x27;value&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        coupons[top_3_set[each_token][<span class="string">&#x27;index&#x27;</span>]] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    result += <span class="number">1</span></span><br><span class="line">    params = coupons + [result]</span><br><span class="line">    <span class="keyword">return</span> yet_another_solution(*params)</span><br></pre></td></tr></table></figure><p>提交给面试官, 得到这么个追问</p><blockquote><p>看了下，2个问题，1. 试试 5 5 10 5 10      2. 能不能不用递归改写？</p></blockquote><p>第二个问题是我故意钓鱼, 就等着上钩免得夜长梦多, 至于第一个问题, 也是因为取 <code>top_3_set</code> 太暴力了<br>应该每次都动态判断最优的组合, 而不是直直的取 <code>[0]</code>, 快速写出对应的修复</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">yet_another_solution_w_o_recursion</span>(<span class="params">a, b, c, d, e</span>):</span><br><span class="line">    coupons = [a, b, c, d, e]</span><br><span class="line">    length = <span class="number">5</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        score_list = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            y = (x + <span class="number">1</span>) % length</span><br><span class="line">            z = (y + <span class="number">1</span>) % length</span><br><span class="line"></span><br><span class="line">            score_list.append(&#123;</span><br><span class="line">                <span class="string">&#x27;score&#x27;</span>: <span class="built_in">sum</span>((coupons[x], coupons[y], coupons[z])),</span><br><span class="line">                <span class="string">&#x27;first&#x27;</span>: &#123;<span class="string">&#x27;index&#x27;</span>: x, <span class="string">&#x27;value&#x27;</span>: coupons[x]&#125;,</span><br><span class="line">                <span class="string">&#x27;second&#x27;</span>: &#123;<span class="string">&#x27;index&#x27;</span>: y, <span class="string">&#x27;value&#x27;</span>: coupons[y]&#125;,</span><br><span class="line">                <span class="string">&#x27;third&#x27;</span>: &#123;<span class="string">&#x27;index&#x27;</span>: z, <span class="string">&#x27;value&#x27;</span>: coupons[z]&#125;,</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        score_list.sort(key=<span class="keyword">lambda</span> _x: _x.get(<span class="string">&#x27;score&#x27;</span>), reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> index, each_set <span class="keyword">in</span> <span class="built_in">enumerate</span>(score_list):</span><br><span class="line">            first_element = each_set[<span class="string">&#x27;first&#x27;</span>]</span><br><span class="line">            second_element = each_set[<span class="string">&#x27;second&#x27;</span>]</span><br><span class="line">            third_element = each_set[<span class="string">&#x27;third&#x27;</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">in</span> (first_element[<span class="string">&#x27;value&#x27;</span>], second_element[<span class="string">&#x27;value&#x27;</span>], third_element[<span class="string">&#x27;value&#x27;</span>]):</span><br><span class="line">                <span class="keyword">if</span> index == length - <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> result</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            coupons[each_set[<span class="string">&#x27;first&#x27;</span>][<span class="string">&#x27;index&#x27;</span>]] -= <span class="number">1</span></span><br><span class="line">            coupons[each_set[<span class="string">&#x27;second&#x27;</span>][<span class="string">&#x27;index&#x27;</span>]] -= <span class="number">1</span></span><br><span class="line">            coupons[each_set[<span class="string">&#x27;third&#x27;</span>][<span class="string">&#x27;index&#x27;</span>]] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            result += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>这下妥了, 不过面试官也留了一手, 落下这么一句话</p><blockquote><p>这个其实有个不用循环的简便方法，不过可能难度稍微有点高<br>一般循环能出来也算可以了</p></blockquote><p>大概猜测应该是某个定理的证明, 后面也没兴趣深究下去…</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>你这个态度还找个锤子的工作</li><li>回家挑大粪吧</li><li>面个试都这么爱抬杠</li><li>程序员基本的素养 异想天开 抽象到宇宙</li><li>面试和工作是两码事</li><li>所以你完全没必要 说什么你好啥的</li><li>面试是双向选择 没必要太放低自己的姿态</li><li>leetcode本身就是抽象的 。。 算法就是靠推理验算能力</li><li>面试一定不能跟面试官抬杠 那就完了</li><li>而且算法本身就是抽象的 脱离实际的  千万不要说不切实际</li><li>如果是游戏的场景 就有价值几个亿的邮票呢</li><li>你争论题目的本质没有意义</li></ul><h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p><a href="https://gist.github.com/hldh214/0fd4fc4b7b7a61df1e09ad410863555b">https://gist.github.com/hldh214/0fd4fc4b7b7a61df1e09ad410863555b</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;今天跟大家分享两道面试遇到的题目, 因为觉得比较有特色, 故写成博客以供后人笑话.&lt;br&gt;为什么说这两道题比较有特色呢, 主要还是因为在国内这种环境已经很难见到直接 Google 不出来答案的题目了.&lt;br&gt;而且这两道题难度适中, 连我这样的人都能照着答案抄, 还能看懂答案, 属实不容易.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>汀桑和憨豆的视频聊天</title>
    <link href="https://hldh214.github.io/futu-interview-0127/"/>
    <id>https://hldh214.github.io/futu-interview-0127/</id>
    <published>2021-01-28T02:38:38.000Z</published>
    <updated>2022-02-07T09:03:13.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>2021&#x2F;01&#x2F;27 多云</p><img src="/futu-interview-0127/rang.jpg" class="" title="rang"><p>我参加了富途社招面试(视频面试), 期望方向是后端开发</p><span id="more"></span><p>一不小心又是一年过去了, 2020 年真是平凡又不平凡的一年, 在历史上每逢<a href="https://zh.wikipedia.org/wiki/%E5%BA%9A%E5%AD%90">庚子</a>年必不寻常<br>武汉肺炎, 国际金融恐慌, 中印边境冲突, blm 运动, 中国南方水灾, …<br>万幸的是, 我和我的朋友们, 亲人们, 平安的熬过了这一年, 做好准备迎接更艰难的辛丑年<br>本次因为是投的社招岗位, 按照惯例还是把职位介绍贴出来供大家围观:</p><img src="/futu-interview-0127/jd.jpg" class="" title="jd"><h1 id="整体感受"><a href="#整体感受" class="headerlink" title="整体感受"></a>整体感受</h1><p>挺年轻一小伙, 而且长得特别像我一个朋友, 故整体感受是比较亲切的(自我感觉良好)</p><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>因为是逛论坛发现的招聘, 应该是直接加了一个研发侧的童鞋帮忙直接内推的<br>所以投完过了几天就来电话约面试了, 流程这块没什么槽点<br>值得一提的是本次面试没有自我介绍的环节, 开门见山的直接你问我答了, 属实不错</p><h2 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h2><p>首先是社招官方套话, 问目前工作情况, 工作内容, 背书似的应答之<br>然后开始问几个准备好的面试题</p><img src="/futu-interview-0127/q1.png" class="" title="q1"><p>在问第一题的时候面试官疑似有些绷不住了, 可能他看过我以前写的面经, 经常吐槽这种题, 但还是把题目抛给我了<br>只能表示理解, 毕竟这也是例行公事, 中华文化博大精深, 传承下来的不就是这些八股文的东西么<br>林林总总的回答了一通, 针对后面的偶现 502 问题, 我稍微回答了一下 cdn 和本身流量大扛不住这两个方向<br>如何确认原因我直接回答的看日志, 追问如何看日志, 看什么日志, 没答上, 面试官很好心的指点我是用 fpm 的 slowlog</p><img src="/futu-interview-0127/q2.png" class="" title="q2"><p>说实话能看到这种题我是很欣慰的, 也算是问到我的老本行上面了, 简单答了几点:</p><ul><li>验证码<ul><li>图片</li><li>短信</li><li>reCAPTCHA</li></ul></li><li>用户行为判断<ul><li>浏览轨迹</li><li>行为特征</li></ul></li></ul><p>然后面试官发现我说的这些点完全没办法为他展开追问, 遂补充了一个最常见的 ip 限流, 然后开始展开问怎么实现<br>我回答要按照实际情况具体判断, 如果是一个基础建设完善的项目可能去负载均衡上面配置一下就可以了<br>如果是一个新项目, 用框架提供的 <code>rate limit</code> 功能实现也可以<br>然后面试官追问手写要怎么弄, 回答用缓存服务, 以 ip 作为 key 实现一个计数器<br>追问有没有其他方法, 肯定有阿只是我不会 <a href="https://en.wikipedia.org/wiki/Traffic_shaping">¯\<em>(ツ)</em>&#x2F;¯</a></p><img src="/futu-interview-0127/q3.png" class="" title="q3"><p>这题没什么槽点, 纯基本功题目, 我说句题外话, 拿这种题跟纯数据结构算法题相比我更倾向于这种题<br>虽然都是所谓的基本功, 但是这种题目上下文明确, 需求明确, 使用场景合理, 便于更好的做出合适的解答, 而不是单纯的背题<br>回到题目中, 我直接就是一个 <code>inner join</code> 完事, 然后索引因为我不是很确定就答了一个 uid 索引<br>然后怎么确认用了什么索引回答的是 <code>explain</code>, 追问 <code>explain</code> 返回的数据需要关注哪些信息, 没答上<br>为了挽尊我扯了一个实际环境的实现, 我认为这种类似排行榜的功能实际上对性能要求不会很高, 因为这些数据通常都是缓存一定时间的<br>这个世界上几乎没有实时更新数据的排行榜, 大多都是 10 分钟甚至 1 小时更新一次数据, 所以性能在这个场景反而不是最需要考虑的<br>然后面试官也回击我, 说也可以把数量冗余到 <code>user</code> 表, 打了个平手</p><img src="/futu-interview-0127/q4.png" class="" title="q4"><p>这题刚发给我面试官就开始抢答了说一个递归就行了, 那行吧, 掏出 IDE 整了一个函数递归实现, 这题就这么快速过了(存在感最低的题)</p><img src="/futu-interview-0127/q5.png" class="" title="q5"><p>说实话一眼看到这题就认出来了, 我当年还没毕业走校招的时候, 面试富途就是这道题, 没想到三年过去了还是这道题(关键是我还是不会<br>其实是不太理解这题的实际场景, 我还是要学习一个, 毕竟 too young<br>稍微答了一下, 把这些规则定义在一个数组里面然后循环这个数组去计算, 好在面试官也没有太过调难, 就这么过了</p><p>最后一道题是直接给的文字描述</p><pre><code>求2个有序数组的交集, 第一个数组长度 n, 第二个数组长度 m   1  3  5  7  9   1  3  4  5  6</code></pre><p>好家伙算法或许会迟到但绝不会缺席, 不幸中的万幸是, 前面几题答的都算还行, 毕竟第一印象最重要了<br>简单答了下爆破的解法, 然后尝试用 set 但是面试官不买账, 就不了了之了</p><p>之后就是一些口头的问题了:</p><ul><li>容器跟控制反转</li><li>b+tree (没答上) 哈希 (简单答了下), 追问碰撞怎么解决 (链表)</li><li>fpm 跟 nginx 通讯的几种方式, 优缺点</li><li>https 的加密是对称还是非对称(这题明显就是挖好坑等我跳的, 正确答案是既使用了对称(加密消息体)又使用了非对称(加密对称 key))</li><li>想不起来了想起来再补 &#x3D;. &#x3D;</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>汀桑和憨豆的视频聊天</li><li>本来准备要50k，结果没唬住，滑了</li><li>这不是我雨哥吗？</li><li>依赖注入和控制反转明显不是一回事</li><li>依赖注入是实现控制反转的技术手段</li><li>老子比他帅十倍</li><li>有一说一，我觉得你面挂了</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;2021&amp;#x2F;01&amp;#x2F;27 多云&lt;/p&gt;
&lt;img src=&quot;/futu-interview-0127/rang.jpg&quot; class=&quot;&quot; title=&quot;rang&quot;&gt;

&lt;p&gt;我参加了富途社招面试(视频面试), 期望方向是后端开发&lt;/p&gt;</summary>
    
    
    
    
    <category term="Interview" scheme="https://hldh214.github.io/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>这都没准备就敢面腾讯。。</title>
    <link href="https://hldh214.github.io/tencent-cdc-interview-0701/"/>
    <id>https://hldh214.github.io/tencent-cdc-interview-0701/</id>
    <published>2020-07-01T14:16:21.000Z</published>
    <updated>2022-02-07T09:03:13.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>2020&#x2F;07&#x2F;01 晴</p><img src="/tencent-cdc-interview-0701/rang.jpg" class="" title="rang"><p>我参加了腾讯社招面试(电话面试), 期望方向是后端开发</p><span id="more"></span><p>好久没写文章了, 博客都长草了, 一方面是因为这一年来生活渐渐稳定下来, 安稳了, 开始自我麻痹了<br>但更主要的原因是懒, 之所以还能跟大家见面聊聊天, 主要的是因为活得相当长久, 十分惊险<br>本次因为是投的社招岗位, 故把职位介绍贴出来供大家围观:</p><img src="/tencent-cdc-interview-0701/jd1.jpg" class="" title="jd"><h1 id="整体感受"><a href="#整体感受" class="headerlink" title="整体感受"></a>整体感受</h1><p>其实也谈不上什么感受, 搬了一天的砖了, 整个人都傻掉了的情况自然是想到什么说什么<br>好在面试官大概也知道世间疾苦, 也没有太多为难</p><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>因为是电面, 所以谈不上什么流程<br>头一天投简历, 过两天接到电话约时间面试, 再过一天也就是今天了<br>本次面试有自我介绍环节</p><h2 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h2><p>由于根本没有准备自我介绍的套路, 纯粹想到啥说啥, 估计面试官也没找到感兴趣的点<br>实在没办法才开始问一些非常 common 的问题 -_-||<br>一开始就是劈头盖脸的针对我现在的工作询问具体内容, 如数家珍以应之<br>后来听到我提到数据库就开始问 mysql</p><ul><li><a href="https://dev.mysql.com/doc/internals/en/optimizer-definitions.html">查询优化器</a> 简单回答了一下 where 条件的优化(举了一个多列联合索引的例子)</li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/storage-engines.html">几种存储引擎</a> 只回答了 myisam 和 innodb</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-index-types.html">聚簇索引&amp;非聚簇索引</a> 简单说了下数据和索引存放位置不同, 追问使用上的区别, 回答用了一个聚簇索引配合 uuid 做主键的例子</li><li><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html">事务隔离级别</a> 拉闸</li></ul><p>终于把我的上限问出来了, 面试官满意的换问题了, 问我 nginx 怎么跟 php 通信, 有哪些方式<br>我回答了三点, 其实严格说只能算两点, 强行凑数, 一个是 fpm 模式, 另一个是 httpd 的 mod-php 模式<br>fpm 模式因为可以通过 socket 通信或者通过 tcp 通信就拿来强行凑数了哈哈哈哈</p><p>面试官一看你大爷的占不到便宜, 赶紧换话题, 说看你提到了 tcp, 能不能说下 tcp 三次握手<br>好家伙, 又是这种题, 跟倒垃圾似的回答之, 追问为啥不是两次握手而是三次握手<br>回答因为 tcp 是<a href="http://ssfnet.org/Exchange/tcp/tcpTutorialNotes.html">全双工</a>的, 所以必须三次来保证被动方发送的数据包主动方确实有收到<br>其实这个问题我在以往的面试的时候被问过无数次了, 所以吐槽一下跟倒垃圾一样<br>面试官显然是不接受这个答案的, 因为网上大多数的所谓 <code>面试题大全</code> 里面给出的 <code>标准答案</code> 是状态机<br>是通过 tcp 的状态控制这个角度去剖析这个问题的, 但是大家好像都被所谓 <code>标准答案</code> 给绑架了<br>觉得好像一道题有且只有一种答案, 不可能有其他解, 不可能像<a href="https://stackoverflow.com/a/28495265/6266737">这样</a>理性讨论, 条理清晰给出论据和证明</p><p>然后这个话题就不了了之了, 然后面试官其实也很无奈, 心里想这个孩纸怎么这么菜, 赶紧问一个<a href="https://leetcode.com/problems/linked-list-cycle/description/">简单题</a>让我挽尊<br>ok 算法题, 直接翻皮水, 常规操作, 我甚至还挣扎了一下, 尝试性的回答了一下可以用 set<br>一直遍历判断 set 里面是否有重复, 若没有则把地址存进 set<br>显然面试官也是不能接受这个答案的, 给我一顿提示(跳过元素遍历), 我也没想出来, 面试官无奈 x2</p><p>然后开始问 php 相关的问题, (这是我独享的 moment<br>首先居然是让我一口气说五个跟 array 相关的函数<br>我: ???? array_pop array_push array_merge array_intersect array_combine<br>面试官似乎意犹未尽, 让我继续表演, 我: ?????????? (差不多得了吧)<br>又挤出来几个 array_map array_filter 我真的一滴都没有了, 合着我背文档呢</p><p>然后提到安全相关的话题, 让我讲一讲 xss, 哇这个我擅长到批爆啊, 真金白银掏出来, 开始对线</p><p>又问了一个智力题? 我也不确定是不是智力题, 题目大致是这样的(网上搜了下也没找到关键词)<br>怎么判断猜拳(剪刀石头布)的输赢, 输入两个手势(比如: 剪刀, 布), 输出前一个手势方输赢(比如: 赢)<br>简单回答了下维护一个真值表来判断输赢<br>追问说如果手势增加怎么处理(比如有十种手势), 或者大到没办法维护真值表, 但是他们的输赢关系还是一样的(有点像斗兽棋)<br>没回答上… 可以说是面试官仁至义尽了, 就结束了提问进入反问环节</p><p>也没有事先准备反问的问题, 就随便问了问目前主要负责啥业务, 回答说负责内部管理系统(意料之中)<br>然后又详细介绍了几个内部系统和用到的技术栈<br>又问了 jd 里面提到的 hadoop 相关的问题, 回答说那个是上游部门的技术栈, 如果候选人懂可以加分, 不要求<br>其实都能猜到答案的, 一个臭写网站的, 搞什么 hive 呢</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul><li>这都没准备就敢面腾讯。。</li><li>这种基本操作都不会</li><li>憨批</li><li>面试看缘分的</li><li>我草。。。你又不行了</li><li>。。。你怎么比我菜</li><li>隔离级别你都不知道？？？</li><li>你们真让人头大，是不是全双工是硬件搞得，收发两条线</li><li>鹅厂面试也是这么low哒</li><li>除草了</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;2020&amp;#x2F;07&amp;#x2F;01 晴&lt;/p&gt;
&lt;img src=&quot;/tencent-cdc-interview-0701/rang.jpg&quot; class=&quot;&quot; title=&quot;rang&quot;&gt;

&lt;p&gt;我参加了腾讯社招面试(电话面试), 期望方向是后端开发&lt;/p&gt;</summary>
    
    
    
    
    <category term="Interview" scheme="https://hldh214.github.io/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>用`降维打击`安排安卓 app 的 TLS 双向认证</title>
    <link href="https://hldh214.github.io/mutual-tls-authentication/"/>
    <id>https://hldh214.github.io/mutual-tls-authentication/</id>
    <published>2019-03-23T02:10:00.000Z</published>
    <updated>2022-02-07T09:03:13.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><a href="/JustTrustMe-SSL-Pinning/" title="上篇文章">上篇文章</a><p>谈到了跟安卓 app 抓包有关的 SSL Pinning 的破解方法<br>后来就有小朋友来信问我如何破解与之相似的双向认证, 也就是客户端证书认证, 便有此文<br>其实这个所谓双向认证的相关概念还挺有意思的, 容我在开始之前先跟大家吹吹牛 xD</p><span id="more"></span><h1 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h1><p>在解释一种技术之前我们往往要先清楚的了解这种技术有什么用, 解决了什么问题<br>追根溯源的讲, 移动互联网的经久不衰, 或多或少是因为移动端相对 web 端更封闭<br>封闭则意味着知识产权能得到更好的保护, 同时也让安全防护(这里特指中间人攻击)变的更容易实现<br>毫不夸张的说, 在 WebAssembly 还没普及之前, web 项目对于中间人攻击是一点办法都没有的<br>而对于移动端来说, app 在一定程度上保证了通信安全, 不被窃听<br>谈到窃听, 这里有两种解决方案, 一种是基于用户名&#x2F;密码的认证, 如下图</p><img src="/mutual-tls-authentication/UserName-Password-Based.gif" class="" title="UserName-Password-Based"><p>而另一种就是今天的主角: TLS 双向认证, 如下图</p><img src="/mutual-tls-authentication/Certificate-Based.gif" class="" title="Certificate-Based"><p>基于用户名&#x2F;密码的认证可以说是最易于理解的方案, 在很多 app 里面也得到了应用<br>而相对 TLS 双向认证而言, 前者对代码侵入更多, 耦合性更高, 难于维护<br>更关键的是, 认证逻辑没有统一的规范, 如果设计不当, 反而会搬石砸脚<br>而后者有统一的规范(TLS), 可以直接在负载均衡上面配置(比如 nginx), 不涉及代码层, 易于维护</p><h1 id="踩点"><a href="#踩点" class="headerlink" title="踩点"></a>踩点</h1><p>本来打算用 fiddler, 无论我怎么配置, <code>ClientCertificate.cer</code> 这个功能都不起效(也可能是我不会用)<br>所以临时弄了个学习版的 charles 凑合, 毕竟是商业软件, 用的比 fiddler 顺手多了 :P<br>另外准备了 dex2jar 和 Java Decompiler 用来做逆向, 网上教程一搜一大把<br>想都不要想下载最新版 app, 直接解压缩 apk 文件, 发现有好几个 <code>.dex</code> 文件(multidex), 如下图</p><img src="/mutual-tls-authentication/dot-dex-files.png" class="" title="dot-dex-files"><p>另外在 <code>assets</code> 目录下发现了我们需要的客户端证书 <code>client.p12</code>, 如下图</p><img src="/mutual-tls-authentication/client-p12.png" class="" title="client-p12"><p>我们尝试导入这个证书, 发现是需要密码的(这不废话吗xD), 故准备反编译 dex 了<br>祭出神器 dex2jar, 一顿操作猛如虎, 然而…</p><img src="/mutual-tls-authentication/d2j-fail.png" class="" title="d2j-fail"><p>大胆猜测是加了壳或者用了什么混淆, 上网查阅发现 dex2jar 已经很久没更新了, 陷入僵局</p><h1 id="降维打击"><a href="#降维打击" class="headerlink" title="降维打击"></a>降维打击</h1><p>直接逆向这条思路是肯定不行了, 得想想别的办法, 脑子里面突然冒出四个字: 历史版本<br>于是乎, 下载了一堆历史版本, 逐个尝试后终于发现在某个版本是没有给 dex 加壳的<br>立马脱掉裤子开干, 用 jd 打开 jar 文件, 全局搜索一下, 此时屏幕上已经出现了一点精斑</p><img src="/mutual-tls-authentication/secret-key.png" class="" title="secret-key"><p>拿到密码后就简单了, 启动 charles, 导入 p12 格式证书(Client Certificates), 设置 SSL 白名单(SSL Proxying)<br>Proxy -&gt; SSL Proxying Settings -&gt; SSL Proxying &amp;&amp; Client Certificates</p><img src="/mutual-tls-authentication/ssl-config.png" class="" title="ssl-config"><img src="/mutual-tls-authentication/client-cert-config.png" class="" title="client-cert-config"><p>在 app 里发一次请求后 charles 提示输入证书的密码, 一顿操作后顺利完成任务, 打完收工</p><img src="/mutual-tls-authentication/proof.png" class="" title="proof"><h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p><a href="https://www.secpulse.com/archives/54027.html">https://www.secpulse.com/archives/54027.html</a><br><a href="https://stackoverflow.com/questions/48959777/how-to-use-applications-client-certificate-with-charles">https://stackoverflow.com/questions/48959777/how-to-use-applications-client-certificate-with-charles</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;a href=&quot;/JustTrustMe-SSL-Pinning/&quot; title=&quot;上篇文章&quot;&gt;上篇文章&lt;/a&gt;
&lt;p&gt;谈到了跟安卓 app 抓包有关的 SSL Pinning 的破解方法&lt;br&gt;后来就有小朋友来信问我如何破解与之相似的双向认证, 也就是客户端证书认证, 便有此文&lt;br&gt;其实这个所谓双向认证的相关概念还挺有意思的, 容我在开始之前先跟大家吹吹牛 xD&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://hldh214.github.io/tags/Android/"/>
    
    <category term="Crawler" scheme="https://hldh214.github.io/tags/Crawler/"/>
    
  </entry>
  
  <entry>
    <title>头条研发-SRE运维研发实习生视频面试(一, 二面)杂记</title>
    <link href="https://hldh214.github.io/toutiao-interview/"/>
    <id>https://hldh214.github.io/toutiao-interview/</id>
    <published>2019-03-11T07:58:51.000Z</published>
    <updated>2022-02-07T09:03:13.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>「你叫咩名」</p><h1 id="一面-30min"><a href="#一面-30min" class="headerlink" title="一面 (~30min)"></a>一面 (~30min)</h1><p>江湖规矩自我介绍, 很罕见的没有用算法题起手, 直接就问很具体的问题, 点个赞 &lt;3</p><span id="more"></span><ol><li>问: 统计日志某一列每行内容出现次数 答: 用 Python 简单写了一下</li><li>问: 如果用 shell 怎么写 答: shell 我不是很熟, 只会用一些命令, 诸如 cat, grep, wc…</li><li>问: Linux 有用过故障查看, 负载查看相关命令吗 答: 查看负载用 top 比较多…</li><li>问: 那 top 这块, 你知道 top 命令第一行显示的是什么吗 答: 我知道 top 大概是看 CPU 占用跟内存占用, 还可以排序</li><li>问: CPU 负载和 CPU 使用率有什么区别 答: 没区别(<a href="https://scoutapp.com/blog/understanding-load-averages">gg</a>)</li><li>问: vim 用的多吗 答: Linux 下我只用 vim</li><li>问: 那你说下 vim 删除一行, 切到最顶&#x2F;最底, 显示行号 答: dd, gg&#x2F;G, :set nu</li><li>问: TCP 三次握手说一下 答: blahblah…(主动方, 被动方, syn, ack, 序号, 序号+1, …)</li><li>问: HTTP 跟 HTTPS 的区别 答: 首先 HTTPS 是基于 HTTP 的, 然后……(SSL, 公钥, 证书授信, 对称&#x2F;不对称加密)</li><li>问: Cookie 的用途 答: blahblah…(存在客户端, 用于鉴权, …)</li><li>问: Cookie 是放在哪里的 答: 如果是请求的话, 是放在请求头里的</li><li>问: Cookie 和 Token 有什么区别 答: 二者是一样的(其实这里没听懂面试官说的 Token 是啥意思, 不了了之了)</li><li>问: Cookie 与 Session 有什么区别 答: ……(包含关系, 服务端, 凭据盗用, 过期, …)</li><li>问: 之前公司的情况 答: ……</li><li>问: 你未来的规划 答: ……(一线, 工程师, 社区科学家, …)</li><li>问: MySQL 主从备份原理说一下 答: 主机写 binlog, 从机定时读 binlog 做追加</li><li>问: Python 会多少 答: 爬虫和自动化比较熟一点</li><li>问: 爬虫你讲一下 答: ……(踩点, 编码, 调试, …)</li></ol><p>说完直接告知我等 5 分钟开始二面<br>说实话面完一面我心里是很 happy 的, 操作系统, 计组, 网络, 算法这些短板, 几乎没怎么问<br>倒是一些很具体化很细节的问题问了很多, 像 vim 这些的, 很亲切, 很舒服, 然而…</p><h1 id="二面-40min"><a href="#二面-40min" class="headerlink" title="二面 (~40min)"></a>二面 (~40min)</h1><p>二面就回归传统了, 八股文式的问题, 两道算法题骑脸, 基本操作<br>不过自我介绍环节倒是罕见的先简单的介绍了下所在部门然后才开始让我讲 xD</p><ol><li>问: 未来规划 答: …</li><li>问: 那我们聊一聊代码吧, 了解一下你的开发能力 答: …</li><li>问: 顺时针打印矩阵</li><li>问: 求周长最长&#x2F;最短的三角形</li><li>问(-_-||): 一个网站打开都发生了什么 答: …(DNS, 缓存, HTTP, 渲染, …)</li><li>问: DNS 解析说一下 答: …(缓存, 网卡设置的 DNS server, …)(这里答的不好)</li><li>问: 拿到 ip 之后怎么拿 MAC 地址 答: 我知道你想问 ARP 协议, 但是我对协议没有了解, 但是知道 ARP 的一些用途比如 ARP 欺骗</li><li>问: php 常见的魔术方法, 魔术变量 答: …(construct, destruct, get, set, call, callStatic)</li><li>问: php 的安全模式和非安全模式有了解吗 答: TS 和 NTS 我只在装扩展的时候才会用 phpinfo 查一下, 并没有了解其中的概念</li><li>问: 怎么判断字符串的字符集 答: Python 有 chardet 追问: 不用库, 手写呢 答: 检测字符集特有的字符</li><li>问: 常见的 HTTP 头说一下 答: 请求头(cookie, referer, vary, etag, origin, …) 响应头(跨域, set-cookie, 缓存, …)</li><li>问: cache-control 是干啥的 答: 存超时时间的</li><li>问: cache-control 没过期和过期了浏览器分别的行为是什么 答: 没过期有 disk cache, 过期了直接请求</li><li>问: 发现浏览器不管过没过期都请求了怎么办 答: 可能用了强制刷新 追问: 没用呢 答: …(静态文件, 忽略 param, url 不同)</li><li>问: 改 Nginx 配置文件 listen 80, 改为 8080 答: 最简单的用 vim, 也可以用 sed</li><li>问: 用 sed 怎么写呢 答: sed regex 文件路径 -i</li><li>问: 一面的第一题, 只统计 aaa 出现的次数 答: cat | grep | wc</li><li>问: 如果只需要统计第一列怎么办 答: 可能要用 tr(其实是 awk, 但是我不会&#x3D;. &#x3D;)</li><li>问: 进程和线程的区别 答: …(<a href="https://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html">gg</a>)</li><li>问: git 怎么修改提交过的 comment 答: …(<a href="https://stackoverflow.com/questions/179123/how-to-modify-existing-unpushed-commits">gg</a>)</li><li>问: git 怎么撤销已经 push 的 commit 答: revert 或者 reset</li></ol><p>然后是我问你答环节, 问了下 php, python 在头条内部的情况<br>被告知 php 已经绝迹, python 和 go 是目前头条内部的主流</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>基友帮忙做的内推, 上周投的简历这周就安排面试了也是好顶赞<br>「吳好緹。吳廣德。」</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;「你叫咩名」&lt;/p&gt;
&lt;h1 id=&quot;一面-30min&quot;&gt;&lt;a href=&quot;#一面-30min&quot; class=&quot;headerlink&quot; title=&quot;一面 (~30min)&quot;&gt;&lt;/a&gt;一面 (~30min)&lt;/h1&gt;&lt;p&gt;江湖规矩自我介绍, 很罕见的没有用算法题起手, 直接就问很具体的问题, 点个赞 &amp;lt;3&lt;/p&gt;</summary>
    
    
    
    
    <category term="Interview" scheme="https://hldh214.github.io/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>谁来拯救误提交的敏感信息</title>
    <link href="https://hldh214.github.io/bfg-repo-cleaner/"/>
    <id>https://hldh214.github.io/bfg-repo-cleaner/</id>
    <published>2019-03-02T10:37:47.000Z</published>
    <updated>2022-02-07T09:03:13.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>你搬了一天的砖, 终于提交了最后一行代码, 翻看着你刚写的晦涩难懂的代码, 你的心里居然有一丝得意<br>夜幕降临, 你点了外卖, 给自己泡了杯淡茶, 望着杯里氤氲着的水汽, 你的思绪飘向了远方……</p><blockquote><p>等等</p></blockquote><span id="more"></span><p>你猛地一惊, 仔细的回想着, 发觉自己好像硬编码了账号密码, 并且跟刚才的提交一起推送了<br>坏了, 你心里想, 但是这有什么呢, 没人无聊到一个个翻 commit 出来看吧<br>于是你删掉了代码中硬编码的账号密码, 再次提交并推送, 你呷了一口茶, 很快便忘了这事<br>但是事情真的就这样结束了吗?</p><h1 id="谁不怕无聊"><a href="#谁不怕无聊" class="headerlink" title="谁不怕无聊?"></a>谁不怕无聊?</h1><p>电脑这种机器被发明是为了代替人类做一些枯燥重复的事情, 例如加减乘除, 这是众所周知的<br>还记得上面说到<code>没人无聊到一个个翻 commit 出来看吧</code>, 确实没<code>人</code>会这么干, 但是<code>机器</code>就不一样了<br><a href="https://github.com/michenriksen/gitrob">https://github.com/michenriksen/gitrob</a> 这个项目, 有兴趣的小伙伴可以考察考察<br>正如 README 里面所讲, 他可以用来扫描 git 仓库里面<code>可能</code>是敏感信息的内容, 导出为报告<br>这就有意思了, 没事可以拿来扫一下自己同学呀, 朋友呀, 同事呀等等…</p><h1 id="那怎么办"><a href="#那怎么办" class="headerlink" title="那怎么办"></a>那怎么办</h1><p>这时候就有小朋友要问了, 那现在怎么办呢, 难道要舍弃 commit 记录, 再提交修正的版本重新做人吗<br>严格来说, 这的确是一种方法, 而且大部分人遇到了首先都会想到这个方法, 简洁明了, 通俗易懂<br>但是作为 geek 的你, 这种方法是不可接受的, 拒绝</p><h1 id="bfg-repo-cleaner"><a href="#bfg-repo-cleaner" class="headerlink" title="bfg-repo-cleaner"></a>bfg-repo-cleaner</h1><p>现在介绍一款专门干这活的利器: <a href="https://rtyley.github.io/bfg-repo-cleaner">https://rtyley.github.io/bfg-repo-cleaner</a><br>别看这玩意虽然是 Scala 写的, 要 Jvm 环境才能运行, 但是确确实实是可以解决我们的问题的<br>首先下载 jar 文件, 按照给出的命令执行, 这里需要事先准备<code>pwd.txt</code>文件来存放敏感词, 一行一个即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"># 先 clone 一份纯 git database 到本地</span><br><span class="line">C:\Users\hldh214\Downloads&gt;git clone --mirror git@github.com:hldh214/buff2steam.git</span><br><span class="line">Cloning into bare repository &#x27;buff2steam.git&#x27;...</span><br><span class="line">remote: Enumerating objects: 127, done.</span><br><span class="line">remote: Counting objects: 100% (127/127), done.</span><br><span class="line">remote: Compressing objects: 100% (82/82), done.</span><br><span class="line">Receiving objects: 100% (127/127), 28.20 KiB | 159.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (62/62), done.</span><br><span class="line">remote: Total 127 (delta 62), reused 75 (delta 32), pack-reused 0</span><br><span class="line"></span><br><span class="line"># --replace-text 表示 grep 替换掉敏感词, 当然你也可以用 --delete-files 来毁尸灭迹</span><br><span class="line">C:\Users\hldh214\Downloads&gt;java -jar bfg-1.13.0.jar --replace-text pwd.txt buff2steam.git</span><br><span class="line"></span><br><span class="line">Using repo : C:\Users\hldh214\Downloads\buff2steam.git</span><br><span class="line"></span><br><span class="line">Found 12 objects to protect</span><br><span class="line">Found 3 commit-pointing refs : HEAD, refs/heads/master, refs/tags/0.0.1</span><br><span class="line"></span><br><span class="line">Protected commits</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">These are your protected commits, and so their contents will NOT be altered:</span><br><span class="line"></span><br><span class="line"> * commit ba928494 (protected by &#x27;HEAD&#x27;)</span><br><span class="line"></span><br><span class="line">Cleaning</span><br><span class="line">--------</span><br><span class="line"></span><br><span class="line">Found 32 commits</span><br><span class="line">Cleaning commits:       100% (32/32)</span><br><span class="line">Cleaning commits completed in 247 ms.</span><br><span class="line"></span><br><span class="line">Updating 1 Ref</span><br><span class="line">--------------</span><br><span class="line"></span><br><span class="line">        Ref                 Before     After</span><br><span class="line">        ---------------------------------------</span><br><span class="line">        refs/heads/master | ba928494 | c0d9ed49</span><br><span class="line"></span><br><span class="line">Updating references:    100% (1/1)</span><br><span class="line">...Ref update completed in 28 ms.</span><br><span class="line"></span><br><span class="line">Commit Tree-Dirt History</span><br><span class="line">------------------------</span><br><span class="line"></span><br><span class="line">        Earliest                  Latest</span><br><span class="line">        |                              |</span><br><span class="line">        ............................DDDm</span><br><span class="line"></span><br><span class="line">        D = dirty commits (file tree fixed)</span><br><span class="line">        m = modified commits (commit message or parents changed)</span><br><span class="line">        . = clean commits (no changes to file tree)</span><br><span class="line"></span><br><span class="line">                                Before     After</span><br><span class="line">        -------------------------------------------</span><br><span class="line">        First modified commit | fc4b9763 | 756caa93</span><br><span class="line">        Last dirty commit     | 16e9e3ef | 3740fc1a</span><br><span class="line"></span><br><span class="line">Changed files</span><br><span class="line">-------------</span><br><span class="line"></span><br><span class="line">        Filename   Before &amp; After</span><br><span class="line">        ------------------------------</span><br><span class="line">        steam.py | 001439f4 ? 90ab2216</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In total, 8 object ids were changed. Full details are logged here:</span><br><span class="line"></span><br><span class="line">        C:\Users\hldh214\Downloads\buff2steam.git.bfg-report\2019-03-02\17-28-42</span><br><span class="line"></span><br><span class="line">BFG run is complete! When ready, run: git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--</span><br><span class="line">You can rewrite history in Git - don&#x27;t let Trump do it for real!</span><br><span class="line">Trump&#x27;s administration has lied consistently, to make people give up on ever</span><br><span class="line">being told the truth. Don&#x27;t give up: https://www.rescue.org/topic/refugees-america</span><br><span class="line">--</span><br><span class="line"></span><br><span class="line"># 可以看到上面的输出, 作者很贴心的告诉你可以直接 reflog expire &amp;&amp; gc 就行了</span><br><span class="line"># 结尾暗藏私货, 举报了:D</span><br><span class="line">C:\Users\hldh214\Downloads&gt;cd buff2steam.git</span><br><span class="line"></span><br><span class="line">C:\Users\hldh214\Downloads\buff2steam.git&gt;git reflog expire --expire=now --all &amp;&amp; git gc --prune=now --aggressive</span><br><span class="line">Enumerating objects: 127, done.</span><br><span class="line">Counting objects: 100% (127/127), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (114/114), done.</span><br><span class="line">Writing objects: 100% (127/127), done.</span><br><span class="line">Total 127 (delta 62), reused 52 (delta 0)</span><br><span class="line"></span><br><span class="line"># 打完收工</span><br><span class="line">C:\Users\hldh214\Downloads\buff2steam.git&gt;git push</span><br><span class="line">Enumerating objects: 85, done.</span><br><span class="line">Counting objects: 100% (85/85), done.</span><br><span class="line">Delta compression using up to 8 threads</span><br><span class="line">Compressing objects: 100% (36/36), done.</span><br><span class="line">Writing objects: 100% (80/80), 13.75 KiB | 2.75 MiB/s, done.</span><br><span class="line">Total 80 (delta 41), reused 77 (delta 38)</span><br><span class="line">remote: Resolving deltas: 100% (41/41), completed with 3 local objects.</span><br><span class="line">To github.com:hldh214/buff2steam.git</span><br><span class="line"> + ba92849...c0d9ed4 master -&gt; master (forced update)</span><br><span class="line"></span><br><span class="line">C:\Users\hldh214\Downloads\buff2steam.git&gt;</span><br></pre></td></tr></table></figure><p>一顿操作猛如虎, 再次去查看 commit history 发现, 账号密码等敏感信息都换成了<code>***REMOVED***</code><br>commit hash 也改了, 在 history 里面已经找不到原来的 commit hash 了<br>但是手动输入原来的 commit hash 是可以查看原来的版本的, 如果各位看官有兴趣可以来瞧瞧:<br>raw: <a href="https://github.com/hldh214/buff2steam/commit/ba92849489d406f62d9473930185fdb699e02ac3#diff-b935f1a5dc14299393e08e0465a70447L46">https://github.com/hldh214/buff2steam/commit/ba92849489d406f62d9473930185fdb699e02ac3#diff-b935f1a5dc14299393e08e0465a70447L46</a><br>fixed: <a href="https://github.com/hldh214/buff2steam/commit/c0d9ed498c90303fe265678d6645498b329157d5#diff-b935f1a5dc14299393e08e0465a70447L46">https://github.com/hldh214/buff2steam/commit/c0d9ed498c90303fe265678d6645498b329157d5#diff-b935f1a5dc14299393e08e0465a70447L46</a></p><h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p><a href="https://www.bennythink.com/git-password.html">https://www.bennythink.com/git-password.html</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;你搬了一天的砖, 终于提交了最后一行代码, 翻看着你刚写的晦涩难懂的代码, 你的心里居然有一丝得意&lt;br&gt;夜幕降临, 你点了外卖, 给自己泡了杯淡茶, 望着杯里氤氲着的水汽, 你的思绪飘向了远方……&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;等等&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Git" scheme="https://hldh214.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>ASF-ui 指北 (feat. Caddy)</title>
    <link href="https://hldh214.github.io/ASF-ui-%E6%8C%87%E5%8C%97/"/>
    <id>https://hldh214.github.io/ASF-ui-%E6%8C%87%E5%8C%97/</id>
    <published>2019-02-14T05:38:00.000Z</published>
    <updated>2022-02-07T09:03:13.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><img src="https://raw.githubusercontent.com/JustArchiNET/ASF-ui/master/.github/previews/bots.png" class="" title="ASF-ui"><p>steam 社区大名鼎鼎的开源自动化工具 <a href="https://github.com/JustArchiNET/ArchiSteamFarm">ASF</a> 团队在去年启动了一个新项目 <a href="https://github.com/JustArchiNET/ASF-ui">ASF-ui</a><br>这个项目为 ASF 提供了用户友好的 web 端界面, 用于监控各个 bot 的运行状态<br>ASF-ui 是纯前端项目, 用于配合 ASF 已有的 IPC server, 因为项目是基于 Vue 写的, 顺路学习了 vue 相关的知识<br>不得不说 vue-router 是真滴方便, 合理的 rewrite 规则让妈妈再也不用担心路由啦, 不愧是 <a href="https://www.v2ex.com/t/382344">前端界的 ThinkPHP</a> :D</p><span id="more"></span><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>可能是因为还处于开发初期, 项目 README 并没有写的很详细, 只能摸着石头过河<br>前面也说了, 项目是纯前端项目, 所以首先你得装个 <a href="https://www.npmjs.com/get-npm">npm</a> 全家桶<br>然后 clone 下来这个项目到 <code>ASF根目录/www</code> 目录下, 执行 <code>npm i</code> 安装依赖<br>确认安装完毕没有啥稀奇古怪的报错后, 执行 <code>npm start</code> 就跑起来了一个本地的 server<br>默认端口是 <code>8080</code>, 打开浏览器访问 <code>localhost:8080</code> 即可开始使用了(当然你还得同时运行 ASF 并启用其 IPC 功能)</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>如果 <code>npm start</code> 使用没问题, 则可以部署为生产环境, 获得压缩过的 js&#x2F;css 文件以提高前端性能<br>使用 <code>npm run build</code> 命令让其编译成用于生产环境的文件<br>因为是生产环境了, 直接用 Nginx 做一下 webserver 美滋滋<br>这里贴一下我的 Nginx 配置, 其中 <code>server_name</code> 和 <code>root</code> 需要换成你自己的配置<br>这份配置文件包括了:</p><ul><li>www 目录的静态文件(也就是 ASF-ui 啦)</li><li>IPC server 的转发(包括 HTTP 和 WS 请求)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # use ssl if you like</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name asf.example.com;</span><br><span class="line"></span><br><span class="line">location ~* /Api/NLog &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:1242;</span><br><span class="line">        # proxy_set_header Host 127.0.0.1; # Only if you need to override default host</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Host $host:$server_port;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line">        # We add those 3 extra options for websockets proxying</span><br><span class="line">        # see https://nginx.org/en/docs/http/websocket.html</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Connection &quot;Upgrade&quot;;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* /Api &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:1242;</span><br><span class="line">        # proxy_set_header Host 127.0.0.1; # Only if you need to override default host</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Host $host:$server_port;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-Server $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root /path/to/ASF/www/dist;</span><br><span class="line">    </span><br><span class="line">        # for Vue&#x27;s route</span><br><span class="line">        if (!-e $request_filename) &#123;</span><br><span class="line">            rewrite ^/(.*) /index.html last;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最近在玩 <a href="https://caddyserver.com/">Caddy</a>, 在这里顺便写一下 Caddy 对应的配置, 让大家感受一下她的魅力</p><ul><li>简洁到再也不能简洁的配置语法, 见下文(秒爆 Nginx)</li><li>集成 <a href="https://letsencrypt.org/">Let’s Encrypt</a></li><li><a href="https://caddy.community/t/siege-benchmarks-nginx-vs-caddy-identical-systems/2962">客观的性能</a></li><li><a href="https://en.wikipedia.org/wiki/HTTP/2">HTTP&#x2F;2</a></li><li>由 golang 带来的原生跨平台, 零依赖 <a href="https://github.com/mholt/caddy#features">(not even libc)</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">asf.pwpwpwpwpwpwpwpwpwpw.pw &#123;</span><br><span class="line">    root /path/to/ASF/www/dist</span><br><span class="line">    proxy /api http://127.0.0.1:1242 &#123; websocket &#125;</span><br><span class="line">    # for Vue&#x27;s route</span><br><span class="line">    rewrite &#123;</span><br><span class="line">        if &#123;path&#125; not_match ^/api</span><br><span class="line">        to &#123;path&#125; /</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>本来写这篇文章是因为查阅资料时没找到跟 ASF-ui 相关的中文资料, 故写之, 权当抛砖引玉<br>后来发现其实并不难, 都是因为我缺少前端项目部署经验导致四处碰壁<br>最后非常感谢 ASF-ui 项目里的热心小伙伴不厌其烦的答疑解惑 &lt;3</p><h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p><a href="https://github.com/JustArchiNET/ArchiSteamFarm/wiki/IPC#can-i-use-asfs-ipc-behind-a-reverse-proxy-such-as-apache-or-nginx">https://github.com/JustArchiNET/ArchiSteamFarm/wiki/IPC#can-i-use-asfs-ipc-behind-a-reverse-proxy-such-as-apache-or-nginx</a><br><a href="https://github.com/JustArchiNET/ASF-ui/issues/398">https://github.com/JustArchiNET/ASF-ui/issues/398</a><br><a href="https://gist.github.com/szarapka/05ba804dfd1c10ad47bf">https://gist.github.com/szarapka/05ba804dfd1c10ad47bf</a><br><a href="https://caddyserver.com/download">https://caddyserver.com/download</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;img src=&quot;https://raw.githubusercontent.com/JustArchiNET/ASF-ui/master/.github/previews/bots.png&quot; class=&quot;&quot; title=&quot;ASF-ui&quot;&gt;

&lt;p&gt;steam 社区大名鼎鼎的开源自动化工具 &lt;a href=&quot;https://github.com/JustArchiNET/ArchiSteamFarm&quot;&gt;ASF&lt;/a&gt; 团队在去年启动了一个新项目 &lt;a href=&quot;https://github.com/JustArchiNET/ASF-ui&quot;&gt;ASF-ui&lt;/a&gt;&lt;br&gt;这个项目为 ASF 提供了用户友好的 web 端界面, 用于监控各个 bot 的运行状态&lt;br&gt;ASF-ui 是纯前端项目, 用于配合 ASF 已有的 IPC server, 因为项目是基于 Vue 写的, 顺路学习了 vue 相关的知识&lt;br&gt;不得不说 vue-router 是真滴方便, 合理的 rewrite 规则让妈妈再也不用担心路由啦, 不愧是 &lt;a href=&quot;https://www.v2ex.com/t/382344&quot;&gt;前端界的 ThinkPHP&lt;/a&gt; :D&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://hldh214.github.io/tags/Linux/"/>
    
    <category term="Steam" scheme="https://hldh214.github.io/tags/Steam/"/>
    
  </entry>
  
  <entry>
    <title>Linuxbrew 初体验</title>
    <link href="https://hldh214.github.io/Head-First-Linuxbrew/"/>
    <id>https://hldh214.github.io/Head-First-Linuxbrew/</id>
    <published>2019-01-20T05:15:24.000Z</published>
    <updated>2022-02-07T09:03:13.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><img src="https://brew.sh/assets/img/linuxbrew.png" class="" title="linuxbrew"><p>用腻了传统包管理(apt, yum, …), 受够了他们的远古版本, 各种参差不齐的第三方源, 逼死强迫症的卸载残留……<br>在<a href="https://fyibmsd.github.io/">基友</a>的推荐下尝试了 linuxbrew, 本文记录了 linuxbrew 从入门到<del>放弃</del></p><span id="more"></span><h1 id="安装-amp-amp-使用"><a href="#安装-amp-amp-使用" class="headerlink" title="安装 &amp;&amp; 使用"></a>安装 &amp;&amp; 使用</h1><p>其实按照<a href="https://linuxbrew.sh/">官网</a>安装就可以了, 这里主要讲一下遇到的问题和解决方案</p><ul><li><p>passwd<br>像 aws, gce 这样的 IDC 给你创建的 vps 都是强制要求使用 ssh 公钥登录<br>在 sudo 的时候总是会有各种问题, 比如装 Oh My Zsh 的时候, 脚本会帮你执行 <code>chsh</code> 去替换默认 shell<br>但是这个命令是需要 root 权限的, 然后因为默认情况当前用户是没有设置密码的<br>没有条件创造条件: <code>sudo passwd ubuntu</code></p></li><li><p><a href="https://github.com/robbyrussell/oh-my-zsh#basic-installation">Oh My Zsh</a><br>首先用 apt 装一下 zsh, 接着一键脚本装一下 framework, 自然的想到 brew 的自动补全功能<br>其实 linuxbrew 已经帮我们集成了 zsh 的自动补全脚本, 但由于鲁棒性考虑并没有集成进 installer 里面, 咱们给安排一下<br>另外需要注意的是, 需要手动添加 <code>brew shellenv</code> 内容至 <code>~/.zshrc</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim ~/.zshrc</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span></span></span><br><span class="line"><span class="comment"># this must be done before</span></span><br><span class="line"><span class="comment"># source $ZSH/oh-my-zsh.sh</span></span><br><span class="line"><span class="comment"># or forcibly rebuild zcompdump by</span></span><br><span class="line"><span class="comment"># rm -f ~/.zcompdump; compinit</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">type</span> brew &amp;&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">  FPATH=$(brew --prefix)/share/zsh/site-functions:<span class="variable">$FPATH</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>GCC<br>不知道为啥, brew 装的 gcc 总是搞不定 env 这一关, 无奈只能再次屈服 apt 淫威 <code>sudo apt install gcc make</code></p></li><li><p>Openresty<br>openresty 官方的 Homebrew 仓库年久失修, 所以我们采用社区小伙伴自制的仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew tap denji/nginx</span><br><span class="line">brew install nginx-full --with-echo-module</span><br></pre></td></tr></table></figure></li></ul><h1 id="Sadness"><a href="#Sadness" class="headerlink" title="Sadness"></a>Sadness</h1><p>linuxbrew 有一个致命缺点是, 他并没有实现 <code>brew services</code> 功能<br>所以就这一点来说还是不如传统的诸如 systemctl 这类生态<br>需要配合 supervisor 或者类似的进程守护方案来实现进程管理</p><h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p><a href="https://linuxbrew.sh/">https://linuxbrew.sh/</a><br><a href="https://github.com/Linuxbrew/brew/blob/master/docs/Shell-Completion.md#configuring-completions-in-zsh">https://github.com/Linuxbrew/brew/blob/master/docs/Shell-Completion.md#configuring-completions-in-zsh</a><br><a href="https://github.com/robbyrussell/oh-my-zsh#basic-installation">https://github.com/robbyrussell/oh-my-zsh#basic-installation</a><br><a href="https://github.com/denji/homebrew-nginx#how-do-i-install-these-formule-nginx-modules">https://github.com/denji/homebrew-nginx#how-do-i-install-these-formule-nginx-modules</a><br><a href="https://github.com/Linuxbrew/brew/issues/300">https://github.com/Linuxbrew/brew/issues/300</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;img src=&quot;https://brew.sh/assets/img/linuxbrew.png&quot; class=&quot;&quot; title=&quot;linuxbrew&quot;&gt;

&lt;p&gt;用腻了传统包管理(apt, yum, …), 受够了他们的远古版本, 各种参差不齐的第三方源, 逼死强迫症的卸载残留……&lt;br&gt;在&lt;a href=&quot;https://fyibmsd.github.io/&quot;&gt;基友&lt;/a&gt;的推荐下尝试了 linuxbrew, 本文记录了 linuxbrew 从入门到&lt;del&gt;放弃&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://hldh214.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>探秘 laravel migration 之 timestamp 奇怪的默认值</title>
    <link href="https://hldh214.github.io/laravel-timestamp-fields-on-migration/"/>
    <id>https://hldh214.github.io/laravel-timestamp-fields-on-migration/</id>
    <published>2018-12-11T05:13:19.000Z</published>
    <updated>2022-02-07T09:03:13.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>大家都知道 laravel 框架有一个 migration 功能, 也就是数据库迁移<br>允许开发者使用 php 语言描述 DDL, 框架自动帮你处理了各种 SQL 规范之间的兼容问题<br>使用 <code>php artisan migrate</code> 即可一键迁移你定义好的所有表结构<br>配合另一神器 <code>seed</code> 可以实现超快速环境搭建 + 测试数据导入<br>今天我要讲一讲 migration 功能中的 <code>timestamp</code> 字段的一个小细节<br>注意这里指的是支持自定义字段名的 <code>timestamp</code> 方法, 而不是自动生成的 <code>timestamps</code> 方法, 请读者留意</p><span id="more"></span><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>其实不能算是坑, 只是困扰了我相当久的时间<br>在某个 migration 文件中有这么一段代码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Schema</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreatePrizesTable</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Run the migrations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title class_">Schema</span>::<span class="title function_ invoke__">create</span>(<span class="string">&#x27;prizes&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">uuid</span>(<span class="string">&#x27;id&#x27;</span>)-&gt;<span class="title function_ invoke__">primary</span>();</span><br><span class="line">            <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">unsignedMediumInteger</span>(<span class="string">&#x27;price&#x27;</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">unsignedMediumInteger</span>(<span class="string">&#x27;num&#x27;</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">timestamp</span>(<span class="string">&#x27;start_at&#x27;</span>);  <span class="comment">// unexpected on update property</span></span><br><span class="line">            <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">uuid</span>(<span class="string">&#x27;user_id&#x27;</span>)-&gt;<span class="title function_ invoke__">index</span>();</span><br><span class="line">            <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">unsignedTinyInteger</span>(<span class="string">&#x27;status&#x27;</span>)-&gt;<span class="keyword">default</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">softDeletes</span>();</span><br><span class="line">            <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">timestamps</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reverse the migrations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title class_">Schema</span>::<span class="title function_ invoke__">dropIfExists</span>(<span class="string">&#x27;prizes&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>问题出在 <code>$table-&gt;timestamp(&#39;start_at&#39;);</code> 这里<br>我们期望得到这样的列:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`start_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP</span><br></pre></td></tr></table></figure><p>实际上我们却得到的是这样的列:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`start_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP</span><br></pre></td></tr></table></figure><p>这就造成相当程度的疑惑, 我建表明明没有写这些 <code>CURRENT_TIMESTAMP</code> 玩意的<br>为啥就自作聪明的给加上了, 一开始我怀疑是 migration 功能导致的<br>后来一顿操作查阅资料后得知是 MySQL 的特性, 设计如此</p><pre><code>If explicit_defaults_for_timestamp is disabled, the server enables the nonstandard behaviors and handles TIMESTAMP columns as follows:TIMESTAMP columns not explicitly declared with the NULL attribute are automatically declared with the NOT NULL attribute. Assigning such a column a value of NULL is permitted and sets the column to the current timestamp.The first TIMESTAMP column in a table, if not explicitly declared with the NULL attribute or an explicit DEFAULT or ON UPDATE attribute, is automatically declared with the DEFAULT CURRENT_TIMESTAMP and ON UPDATE CURRENT_TIMESTAMP attributes.</code></pre><p>ref: <a href="https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp">https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_explicit_defaults_for_timestamp</a></p><p>知道问题原因自然就知道怎么解决了, 给对应列加上允许 NULL 即可<br>如果你愿意, 甚至可以加上默认值为 NULL 来取消 <code>DEFAULT CURRENT_TIMESTAMP</code><br>在 laravel 的 migration 中应该这样写:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Schema</span>::<span class="title function_ invoke__">create</span>(<span class="string">&#x27;prizes&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;<span class="title function_ invoke__">timestamp</span>(<span class="string">&#x27;start_at&#x27;</span>)-&gt;<span class="title function_ invoke__">nullable</span>();  <span class="comment">// -&gt;default(null)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Lesson learned!</p><h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p><a href="https://github.com/laravel/framework/issues/21912">https://github.com/laravel/framework/issues/21912</a><br><a href="https://github.com/laravel/framework/issues/24780">https://github.com/laravel/framework/issues/24780</a><br><a href="https://ma.ttias.be/laravel-mysql-auto-adding-update-current_timestamp-timestamp-fields/">https://ma.ttias.be/laravel-mysql-auto-adding-update-current_timestamp-timestamp-fields/</a><br><a href="https://laracasts.com/discuss/channels/eloquent/why-table-timestamps-puts-on-update-current-timestamp-on-the-created-at-column">https://laracasts.com/discuss/channels/eloquent/why-table-timestamps-puts-on-update-current-timestamp-on-the-created-at-column</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;大家都知道 laravel 框架有一个 migration 功能, 也就是数据库迁移&lt;br&gt;允许开发者使用 php 语言描述 DDL, 框架自动帮你处理了各种 SQL 规范之间的兼容问题&lt;br&gt;使用 &lt;code&gt;php artisan migrate&lt;/code&gt; 即可一键迁移你定义好的所有表结构&lt;br&gt;配合另一神器 &lt;code&gt;seed&lt;/code&gt; 可以实现超快速环境搭建 + 测试数据导入&lt;br&gt;今天我要讲一讲 migration 功能中的 &lt;code&gt;timestamp&lt;/code&gt; 字段的一个小细节&lt;br&gt;注意这里指的是支持自定义字段名的 &lt;code&gt;timestamp&lt;/code&gt; 方法, 而不是自动生成的 &lt;code&gt;timestamps&lt;/code&gt; 方法, 请读者留意&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>migrate-to-hexo</title>
    <link href="https://hldh214.github.io/migrate-to-hexo/"/>
    <id>https://hldh214.github.io/migrate-to-hexo/</id>
    <published>2018-11-21T09:35:39.000Z</published>
    <updated>2022-02-07T09:03:13.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>各种原因, 历经千辛万苦, 本博客从 CSDN 迁移到了 GitHub pages<br>在 node 和 hexo 的加持下获得重生 <del>(以前的博文时间暂时对不上就是了:P)</del> 19&#x2F;02&#x2F;06: 对上了<br>本文记录了迁移过程遇到的一些问题和解决方案</p><span id="more"></span><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>首先去各种搜索前辈们的搭建教学, 一顿操作后顺利输出 hello world<br>然后想着怎么去迁移 CSDN 的博客<br>在网上也找了很多方案, 基本上都是从前端采集 + 解析 这种方案<br>其实 CSDN 后台是有提供直接导出 md 格式的功能的, 只是要一篇一篇文章的点<br>好在我的文章并不多, 十分的惊险<br>一顿操作导出了所有 57 篇博文, 接下来就只剩下插入 hexo 的 metadata 了<br>首先想到 Python, 毕竟脚本小子, 被 Python 宠坏了, 不废话直接上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sorted_ls</span>(<span class="params">path</span>):</span><br><span class="line">    mtime = <span class="keyword">lambda</span> f: os.stat(os.path.join(path, f)).st_mtime</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">sorted</span>(os.listdir(path), key=mtime))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ls = sorted_ls(<span class="string">&#x27;./blogs&#x27;</span>)</span><br><span class="line">os.chdir(<span class="string">&#x27;./blogs&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> index, each <span class="keyword">in</span> <span class="built_in">enumerate</span>(ls):</span><br><span class="line">    tmp = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(each, <span class="string">&#x27;r+&#x27;</span>, encoding=<span class="string">&#x27;utf8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> fp:</span><br><span class="line">            tmp.append(line)</span><br><span class="line">        tmp.insert(<span class="number">0</span>, <span class="string">&#x27;---\ntitle: &#123;0&#125;\ndate: 2018-11-21 15:&#123;1&#125;:00\n---\n&#x27;</span>.<span class="built_in">format</span>(</span><br><span class="line">            each.split(<span class="string">&#x27;.md&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">            <span class="number">59</span> - index</span><br><span class="line">        ))</span><br><span class="line">        fp.seek(<span class="number">0</span>)</span><br><span class="line">        fp.truncate()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> tmp:</span><br><span class="line">            fp.write(line)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中 <code>sorted_ls</code> 函数用于把所有博文按照创建时间排序以便生成顺序的 metadata<br>然后上传 hexo 预览, 发现文件头部有一些奇怪的东西 <code>\xEF\xBB\xBF</code><br>又是一顿搜索发现是 <a href="https://en.wikipedia.org/wiki/Byte_order_mark">Byte_order_mark</a> 这玩意<br>是 Windows 的锅, 解决方案也给出了, ref: <a href="https://my.oschina.net/u/264186/blog/602088">https://my.oschina.net/u/264186/blog/602088</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">filelist=$(<span class="built_in">ls</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;all file&quot;</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$filelist</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line">    <span class="comment">#if [ -d $file ]</span></span><br><span class="line">    <span class="comment">#then</span></span><br><span class="line">        <span class="comment">#tar -cf $file.tar $file</span></span><br><span class="line">    grep -I -r -l $<span class="string">&#x27;\xEF\xBB\xBF&#x27;</span>  <span class="variable">$file</span> | xargs sed  -i  <span class="string">&#x27;s/\xEF\xBB\xBF//&#x27;</span></span><br><span class="line">                <span class="comment">#echo $file</span></span><br><span class="line">    <span class="comment">#fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>其实 shell 这块我可以说是一窍不通, 也就只能随便搞搞, 能用就行的那种<br>运行之后发现博文的文件名带有空格, 会出现解析错误导致取不到正确的文件名<br>再次一顿操作, 直播学 shell, xargs 后再次搞起</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">filelist=$(<span class="built_in">ls</span>)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> *</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    grep -I -r -l $<span class="string">&#x27;\xEF\xBB\xBF&#x27;</span> <span class="string">&quot;<span class="variable">$&#123;file&#125;</span>&quot;</span> | xargs -d <span class="string">&#x27;\n&#x27;</span> sed -i <span class="string">&#x27;s/\xEF\xBB\xBF//&#x27;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>其实就是注意了一下引号和 <code>xargs</code> 的 <code>-d</code> 参数即可<br>最后就是激动人心的 <code>deploy</code> 了, 完事</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>下班</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;各种原因, 历经千辛万苦, 本博客从 CSDN 迁移到了 GitHub pages&lt;br&gt;在 node 和 hexo 的加持下获得重生 &lt;del&gt;(以前的博文时间暂时对不上就是了:P)&lt;/del&gt; 19&amp;#x2F;02&amp;#x2F;06: 对上了&lt;br&gt;本文记录了迁移过程遇到的一些问题和解决方案&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>用 JustTrustMe 干翻 SSL Pinning_ 爬尤美 app 付费视频(app.youmei.com)</title>
    <link href="https://hldh214.github.io/JustTrustMe-SSL-Pinning/"/>
    <id>https://hldh214.github.io/JustTrustMe-SSL-Pinning/</id>
    <published>2018-11-20T14:54:44.000Z</published>
    <updated>2022-02-07T09:03:13.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>基友推荐一款在线看片 app, 寻思给爬一下视频链接爽一哈, 本文记录了采集全过程</p><span id="more"></span><h1 id="踩点"><a href="#踩点" class="headerlink" title="踩点"></a>踩点</h1><p>直接打开 app, 挂上 fiddler 代理, 设置好 SSL 证书开搞<br>结果发现啥都抓不到, fiddler 显示 HTTPS 请求鉴权失败<br>当时就陷入沉思, 用浏览器打开 HTTPS 网页是正常, 为啥进 APP 了就不行呢<br>经过一番搜索之后猜测是高版本安卓 SDK 默认取消信任用户导入的证书<br><a href="https://stackoverflow.com/questions/40363553/list-certificate-stored-in-user-credentials">https://stackoverflow.com/questions/40363553/list-certificate-stored-in-user-credentials</a><br>马上着手进行验证, 一顿操作 root 掉安卓设备, 把 fiddler 证书直接 cp 到系统证书目录里</p><img src="/JustTrustMe-SSL-Pinning/DO_NOT_TRUST.png" class="" title="DO_NOT_TRUST"><p>怀着鸡冻的心情再次打开目标 app, 查看 fiddler 截获的数据包, 请求仍然显示鉴权失败<br>再次陷入沉思 xD</p><h1 id="Xposed-hook-救世"><a href="#Xposed-hook-救世" class="headerlink" title="Xposed hook 救世"></a>Xposed hook 救世</h1><p>毫不夸张的说, 这玩意真的是救世主, root 后真的可以为所欲为<br><a href="https://github.com/Fuzion24/JustTrustMe">https://github.com/Fuzion24/JustTrustMe</a> 借助这款利器, 轻松搞定<br>首先装 xposed 框架, 然后下载 JustTrustMe 这个 xposed 插件并安装<br>此时只需按照正常流程, 将 fiddler 证书导入(到用户证书)<br>然后直接启动目标 app, 此时 fiddler 已经能看到一些精斑了</p><img src="/JustTrustMe-SSL-Pinning/secret.png" class="" title="secret"><h1 id="善后"><a href="#善后" class="headerlink" title="善后"></a>善后</h1><p>其实最难的一步已经过去了, 剩下的就是无聊的分析每个请求, 找出关键参数<br>首先被 headers 里面的 sign 和 token 吓住了, 以为每个请求都有签名鉴权<br>后来经过高人指点发现其实直接在目标 app 内选择分享 - 复制链接<br>到浏览器访问, 稍微看看请求部分便发现了曙光</p><img src="/JustTrustMe-SSL-Pinning/backdoor.png" class="" title="backdoor"><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>看到这里其实你会发现, 最终的结果其实跟 app 抓包毫无关系<br>你就算不知道怎么抓 app 的包, 照样还是能通过分享 - 复制链接<br>然后去浏览器分析, 一样能获得结果…… :P<br>本文旨在记录应对 SSL Pinning 的方法, 以后碰到使用这种技术的 app 就不会慌张了<br>当然, 正如 <a href="https://bbs.pediy.com/thread-226435.htm">https://bbs.pediy.com/thread-226435.htm</a> 评论区讨论的那样<br>设置代理的方式也很重要, 通常而言通过 wlan 配置代理足矣<br>但是如果遇到 app 本身自带代理, 而覆盖了系统配置的代理, 则会失效<br>一个简单粗暴的方法是用 pc 端安卓模拟器, 直接给模拟器挂个全局代理到 fiddler<br>即可解决此种问题 :P</p><h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p><a href="https://bbs.pediy.com/thread-226435.htm">https://bbs.pediy.com/thread-226435.htm</a><br><a href="https://github.com/WooyunDota/DroidSSLUnpinning">https://github.com/WooyunDota/DroidSSLUnpinning</a><br><a href="https://github.com/Fuzion24/JustTrustMe">https://github.com/Fuzion24/JustTrustMe</a><br><a href="https://github.com/mrdulin/blog/issues/30">https://github.com/mrdulin/blog/issues/30</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;基友推荐一款在线看片 app, 寻思给爬一下视频链接爽一哈, 本文记录了采集全过程&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>头条研发秋招补招-后端开发工程师视频面试杂记</title>
    <link href="https://hldh214.github.io/%E5%A4%B4%E6%9D%A1%E7%A0%94%E5%8F%91%E7%A7%8B%E6%8B%9B%E8%A1%A5%E6%8B%9B-%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%A7%86%E9%A2%91%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0/"/>
    <id>https://hldh214.github.io/%E5%A4%B4%E6%9D%A1%E7%A0%94%E5%8F%91%E7%A7%8B%E6%8B%9B%E8%A1%A5%E6%8B%9B-%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%A7%86%E9%A2%91%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0/</id>
    <published>2018-11-05T09:07:00.000Z</published>
    <updated>2022-02-07T09:03:13.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>秋意浓</p><h1 id="面试-60min"><a href="#面试-60min" class="headerlink" title="面试 (~60min)"></a>面试 (~60min)</h1><p>一开始就被俩算法题骑脸, 大概占了整个面试一半的时间</p><span id="more"></span><ol><li><p>查找第一个缺失的正整数。 时间复杂度O(n) ，空间复杂度 O(1)<br> Example 1: Input: [1,2,0] Output: 3 Example 2: Input: [3,4,-1,1] Output: 2 Example 3: Input: [7,8,9,11,12] Output: 1Example 1: Input: [1,2,0] Output: 3 Example 2: Input: [3,4,-1,1] Output: 2 Example 3: Input: [7,8,9,11,12] Output: 1</p></li><li><p>给定一个链表，每隔k个元素做一次反转<br> Example: Inputs:  1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;NULL and k &#x3D; 3  Output:  3-&gt;2-&gt;1-&gt;6-&gt;5-&gt;4-&gt;8-&gt;7-&gt;NULL.  Inputs:   1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;NULL and k &#x3D; 5 Output:  5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;8-&gt;7-&gt;6-&gt;NULL. Example: Inputs:  1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;NULL and k &#x3D; 3  Output:  3-&gt;2-&gt;1-&gt;6-&gt;5-&gt;4-&gt;8-&gt;7-&gt;NULL.  Inputs:   1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6-&gt;7-&gt;8-&gt;NULL and k &#x3D; 5 Output:  5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;8-&gt;7-&gt;6-&gt;NULL.</p></li></ol><p>全部没答上, 基本操作, 面试官赶紧说我问你几个问题吧(-_-||)<br>3. 问: 浅拷贝和深拷贝的区别是什么 答: 我不知道具体的原理, 我认为就像软链接和硬链接一样<br>4. 问: Python 的垃圾回收有了解吗, 就是 GC 答: PHP 的我比较熟一点, 是基于 ref_count 做的 追问: 如果有互相引用的情况怎么办 答: 没有了解<br>5. 问: 有了解过乐观锁和悲观锁吗 答: 乐观锁我比较熟悉, 以前做项目开发经常用到, 就是在 update 操作之前先查一下该数据当前的状态并且作为此次 update 的 where 条件, 悲观锁只知道一点点概念, 不是很熟<br>6. 问: 看你对 web 比较了解, 请讲一下 HTTP 状态码 2xx 3xx 4xx 5xx 的含义 答: 200 ok, 3 开头的大多是跳转, 4 开头的大多是 webserver 层的错误比如找不到文件, 5 开头的大多是 backend server 层的错误比如 fpm 内存满了<br>7. 问: 发起一个 HTTP 请求都有哪些过程 答: 首先会去查请求域名的 dns 然后向对应 ip 发请求比如 get 或者 post 报文<br>8. 问: 那 get 和 post 有什么区别 答: 跨域, 浏览器历史记录, 参数长度限制, 应用(涉及安全要求比较高的场合用 post)<br>9. 问: tcp 的三次握手和四次挥手在什么情况下会发生 答: 建立连接和断开连接的时候<br>10. 问: 四次挥手你说一下 答: 首先需要断开连接的一方(下称客户端)发送第一次挥手, 收到请求的一方(下称服务器端)回复一个请求, 等待数据传输完毕后再回复一个请求, 然后客户端也回复一个请求之后便断开连接<br>11.  问:  中间有个 time_wait 状态是干嘛用的 答: 因为 tcp 是基于网络通信不可靠这个原则, 当超时了则丢弃这个请求, 这就是 time_wait 的作用<br>12. 问: 看你简历写了 lnmp, Linux 你都用过哪些 答: Linux 下的 php 生态, 从 Nginx 到 fpm 都很熟悉<br>13. 问: 你配置过 Nginx 的 upstream 吗, 如果有多个 upstream 他是怎么选的 答: 用过, 平均分配 追问: 只有公平分配吗 答: 是(这里答错了 :P) 追问: 某个 upstream 挂了他会怎么处理 答: 请求不会落到这台 upstream, 至于重试算法我没有了解<br>14. 问: Linux 下面的话你用过哪些常用的命令 答: 最常用的 ls, ll, apt, supervisor 追问: 网络相关的命令用过吗 答: curl. wget 只有这些了 追问: 查看网络端口相关的呢 答: 没有了解 追问: 那你抓包也没用过咯 答: 我一般是在 Windows 下面用带 GUI 界面的软件抓包 追问: 用哪个软件 答: fiddler 追问: 是因为在腾讯的原因吗 答: 我去腾讯之前就已经在用 fiddler 啦<br>15. 问: 最后再问你一个问题吧, 有一千瓶水有一瓶有毒, 要用最少的兔子, 最少的次数去找出这瓶有毒的水 答: ……..(这里我首先想到是二分查找, 询问面试官是否是考察此算法, 被告知不是, 又想了一会放弃了)<a href="https://blog.csdn.net/u010278318/article/details/8883531">https://blog.csdn.net/u010278318/article/details/8883531</a></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>我大概是今年春招投 tx 的时候一并投的头条, 当时一点消息都没有<br>结果来了个这么一出, 只能说是好事多磨 xD?</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;秋意浓&lt;/p&gt;
&lt;h1 id=&quot;面试-60min&quot;&gt;&lt;a href=&quot;#面试-60min&quot; class=&quot;headerlink&quot; title=&quot;面试 (~60min)&quot;&gt;&lt;/a&gt;面试 (~60min)&lt;/h1&gt;&lt;p&gt;一开始就被俩算法题骑脸, 大概占了整个面试一半的时间&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>华阅文化深圳-PHP研发工程师面试杂记</title>
    <link href="https://hldh214.github.io/%E5%8D%8E%E9%98%85%E6%96%87%E5%8C%96%E6%B7%B1%E5%9C%B3-PHP%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0/"/>
    <id>https://hldh214.github.io/%E5%8D%8E%E9%98%85%E6%96%87%E5%8C%96%E6%B7%B1%E5%9C%B3-PHP%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0/</id>
    <published>2018-11-01T07:22:37.000Z</published>
    <updated>2022-02-07T09:03:13.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>2018&#x2F;11&#x2F;01 晴转多云<br>我参加了华阅文化深圳面试, 期望方向是PHP研发工程师<br>面试地点在广东省深圳市科兴科学园 C3-502</p><span id="more"></span><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>面试通知是上午十点整, 我提前了约半小时到场, 看到很多骚年在稻香过早<br>首先是笔试, 然后连着面了两把, 全程约两小时, 完事了被告知回家等通知~</p><h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><p>说实话这家的笔试题是我见过的为数不多的良心题, 一道送分题一道算法题一道应用题<br>区分度很高, 废话不多说, 直接开始书法展览 :P</p><img src="/%E5%8D%8E%E9%98%85%E6%96%87%E5%8C%96%E6%B7%B1%E5%9C%B3-PHP%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0/calligraphy.jpg" class="" title="calligraphy"><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>首先问了爬虫相关的问题, 可能跟公司业务相关所以比较关心<br>问了怎么解析 HTML, 如何提取想要的内容 (regex, xpath), <a href="https://stackoverflow.com/questions/3652657/what-algorithm-does-readability-use-for-extracting-text-from-urls">readability algorithm</a><br>然后问了 tp 和 laravel 的区别 (口水题)<br>问了 Linux 下查看最近 CPU 使用率的问题<br>session 和 cookie 的区别 (神龟虽寿)</p><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>二面面试官看起来是部门 leader 这么个角色, 开门见山的就开始问底层原理<br>首先问 gevent 是啥, 然后问什么是协程, 围绕协程这玩意足足聊了十几分钟<br>然后问了我做过的项目, 最拿得出手的项目<br>然后给挑了一个笔试题的 bug 让我 fix, 我慌慌张张的居然还真 solve 了<br>趁机了解了一下 php 在公司的应用, 主要还是写 web 后端和 APP 的接口<br>然后还有一套基于 c艹 的成熟的爬虫框架, 用来爬内容的</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这家公司给我印象很深, 前台小改改萌萌哒很漂亮很温柔, 按时上班点个赞<br>面试题目让人耳目一新, 面试过程也没有问一些套话和老生常谈的话题 (你为什么从上家离职 …)<br>也没有要求你做无聊的自我介绍以便给自己留时间看简历<br>再加上无可挑剔的地理位置和风水<br>真叫人欲罢不能 xD</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;2018&amp;#x2F;11&amp;#x2F;01 晴转多云&lt;br&gt;我参加了华阅文化深圳面试, 期望方向是PHP研发工程师&lt;br&gt;面试地点在广东省深圳市科兴科学园 C3-502&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>百度秋招深圳-C++_PHP研发工程师面试杂记</title>
    <link href="https://hldh214.github.io/%E7%99%BE%E5%BA%A6%E7%A7%8B%E6%8B%9B%E6%B7%B1%E5%9C%B3-C++_PHP%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0/"/>
    <id>https://hldh214.github.io/%E7%99%BE%E5%BA%A6%E7%A7%8B%E6%8B%9B%E6%B7%B1%E5%9C%B3-C++_PHP%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0/</id>
    <published>2018-09-20T01:44:35.000Z</published>
    <updated>2022-02-07T09:03:13.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>2018&#x2F;09&#x2F;19 晴<br>我参加了百度秋招面试, 期望方向是 PHP 研发<br>面试地点在广东省深圳市百度国际大厦, 粗略估计了一下我那一场的面试大概有 15~20 来人参加<br><a href="https://youtu.be/nXT_wz5Gcq4">https://youtu.be/nXT_wz5Gcq4</a></p><span id="more"></span><img src="/%E7%99%BE%E5%BA%A6%E7%A7%8B%E6%8B%9B%E6%B7%B1%E5%9C%B3-C++_PHP%E7%A0%94%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0/no_photography.jpg" class="" title="no_photography"><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>到场直接被安排在旁边坐下等候通知, 过了一会就有工作人员带路去面试场地<br>由于深圳百度是新建的大楼, 可能没有完全启用, 本次面试被安排在 14 楼食堂层<br>所有人都在一个大场地里, 就像高考一样分开做好面试, 挺刺激的 xD<br>面试了两轮, 面完二面后被告知先去等候区等候, 一会工作人员过来通知可以离场了</p><h2 id="一面-45-min"><a href="#一面-45-min" class="headerlink" title="一面 (~ 45 min)"></a>一面 (~ 45 min)</h2><ul><li>cookie 和 session 的异同<br> <a href="https://stackoverflow.com/questions/6339783/what-is-the-difference-between-sessions-and-cookies-in-php">简单题, 一顿口水喷之</a></li><li>MyISAM 和 InnoDB 的区别<br> <a href="https://stackoverflow.com/questions/20148/myisam-versus-innodb">又一道简单题, 答了事务和聚簇&#x2F;非聚簇索引</a></li><li><a href="https://leetcode.com/problems/largest-number/description/">largest-number</a><br> 没答上, 基本操作</li><li>计算 NGINX 的 access.log 给定 ip 的访问量<br> <code>cat access.log | grep xx.xx.xx.xx | wc -l</code><br> <a href="https://www.jianshu.com/p/537a0bddda94">其实我不会, 随便答的</a></li><li>ls 近一周的文件<br> 没答上, 我当时在想 ls | grep | 什么鬼的, 后来面试官提示说 ls 有现成的参数符合需求<br> <a href="https://stackoverflow.com/questions/15691359/how-can-i-list-ls-the-5-last-modified-files-in-a-directory">其实还是要用 tail 的嘛~</a></li></ul><h2 id="二面-35-min"><a href="#二面-35-min" class="headerlink" title="二面 (~ 35 min)"></a>二面 (~ 35 min)</h2><ul><li>HTTP Code 200 302 304 403 的含义<br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">很新颖的题, 我喜欢, 一开始差点没想起来 304, 秀逗了</a></li><li>php 有哪些魔术方法<br>构造&#x2F;析构, __get&#x2F;__set 当时只答对了这些<br><a href="http://php.net/manual/zh/language.oop5.magic.php">http://php.net/manual/zh/language.oop5.magic.php</a></li><li>HTTP POST 和 GET 的区别<br> <a href="https://www.w3schools.com/tags/ref_httpmethods.asp">口水题, 只答了长度限制和跨域</a></li></ul><table><thead><tr><th align="center"></th><th>GET</th><th>POST</th></tr></thead><tbody><tr><td align="center">BACK button&#x2F;Reload</td><td>Harmless</td><td>Data will be re-submitted (the browser should alert the user that the data are about to be re-submitted)</td></tr><tr><td align="center">Bookmarked</td><td>Can be bookmarked</td><td>Cannot be bookmarked</td></tr><tr><td align="center">Cached</td><td>Can be cached</td><td>Not cached</td></tr><tr><td align="center">Encoding type</td><td>application&#x2F;x-www-form-urlencoded</td><td>application&#x2F;x-www-form-urlencoded or multipart&#x2F;form-data. Use multipart encoding for binary data</td></tr><tr><td align="center">History</td><td>Parameters remain in browser history</td><td>Parameters are not saved in browser history</td></tr><tr><td align="center">Restrictions on data length</td><td>Yes, when sending data, the GET method adds the data to the URL; and the length of a URL is limited (maximum URL length is 2048 characters)</td><td>No restrictions</td></tr><tr><td align="center">Restrictions on data type</td><td>Only ASCII characters allowed</td><td>No restrictions. Binary data is also allowed</td></tr><tr><td align="center">Security</td><td>GET is less secure compared to POST because data sent is part of the URL Never use GET when sending passwords or other sensitive information!</td><td>POST is a little safer than GET because the parameters are not stored in browser history or in web server logs</td></tr><tr><td align="center">Visibility</td><td>Data is visible to everyone in the URL</td><td>Data is not displayed in the URL</td></tr></tbody></table><ul><li>怎么遍历树<br> <a href="https://zh.wikipedia.org/wiki/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86">动真格了, 凉凉, 没答上</a></li><li>怎么抓包 (fiddler) HTTPS 怎么办<br> 终于问到老本行了, 抓 HTTPS 给客户端装自签名证书, 顺便提了下代理抓包(Android)</li><li>怎么优化 SQL (explain) MySQL 优化有哪些手段<br> 稍微有点含金量的口水题, 我答了合理索引, 冗余字段, 缓存<br> 面试官听完接着问还有吗, <a href="https://www.xaprb.com/about/">当然有啊</a></li><li>一个网页 从输入网址到页面打开 发生了什么<br> <a href="https://github.com/alex/what-happens-when/blob/master/README.rst">没意思, 只答上了一些应用层的知识, 费力不讨好</a></li><li>Consistent Hashing<br><a href="https://zh.wikipedia.org/wiki/%E4%B8%80%E8%87%B4%E5%93%88%E5%B8%8C">没答上, 尴尬</a></li><li>n 个数找出现次数大于 n&#x2F;2 次的<br><a href="https://leetcode.com/problems/majority-element/">没答上, 尴尬++</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">majorityElement</span>(<span class="params">self, nums</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Counter(nums).most_common()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>1000亿个数找出最大的 100 个数<br>没答上, 说了下思路也不知道面试官怎么想<br><a href="https://stackoverflow.com/questions/19227698/write-a-program-to-find-100-largest-numbers-out-of-an-array-of-1-billion-numbers">https://stackoverflow.com/questions/19227698/write-a-program-to-find-100-largest-numbers-out-of-an-array-of-1-billion-numbers</a><br><a href="https://code.i-harness.com/en/q/1256432">https://code.i-harness.com/en/q/1256432</a><blockquote><p>If this is asked in an interview, I think the interviewer probably<br>wants to see your problem solving process, not just your knowledge of<br>algorithms.</p><p>The description is quite general so maybe you can ask him the range or<br>meaning of these numbers to make the problem clear. Doing this may<br>impress an interviewer. If, for example, these numbers stands for<br>people’s age of within a country (e.g. China),then it’s a much easier<br>problem. With a reasonable assumption that nobody alive is older than<br>200, you can use an int array of size 200(maybe 201) to count the<br>number of people with the same age in just one iteration. Here the<br>index means the age. After this it’s a piece of cake to find 100<br>largest number. By the way this algo is called counting sort.</p><p>Anyway, making the question more specific and clearer is good for you<br>in an interview.</p></blockquote></li><li>13 balls puzzle<br>没答上, 面试官当面给了提示也没答上, 后来查了正确答案也不知道当时的提示是什么意思<br>当时面试官提示可以 4 4 4 4 1 分组进行比较, 总而言之, 尴尬<br><a href="https://zhidao.baidu.com/question/424665489778921252.html">https://zhidao.baidu.com/question/424665489778921252.html</a></li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>说实话笔试做的挺烂的, 因为不允许跳出网页用本地 IDE<br>又只能用 php 导致我很多函数不记得, 书到用时方恨少了<br>还是被传唤去面试, 没想到一面就是一下午, 当时还担心简历带的不够<br>后来面完二面我简历刚好用完的时候把我赶走了, 也算是不幸中的万幸??????<br>问了下二面面试官目前 php 在百度的发展, 答曰需求不大, 多为老项目维护<br>也难怪岗位名称大家都喊斜杠前面的而忽略掉斜杠后面的 :P</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;2018&amp;#x2F;09&amp;#x2F;19 晴&lt;br&gt;我参加了百度秋招面试, 期望方向是 PHP 研发&lt;br&gt;面试地点在广东省深圳市百度国际大厦, 粗略估计了一下我那一场的面试大概有 15~20 来人参加&lt;br&gt;&lt;a href=&quot;https://youtu.be/nXT_wz5Gcq4&quot;&gt;https://youtu.be/nXT_wz5Gcq4&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>php web 后端开发面试总结 - 1808</title>
    <link href="https://hldh214.github.io/php%20web%20%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%20-%201808/"/>
    <id>https://hldh214.github.io/php%20web%20%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%20-%201808/</id>
    <published>2018-08-29T12:52:11.000Z</published>
    <updated>2022-02-07T09:03:13.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>本文总结了这周面试的两家公司所谓心得体会</p><span id="more"></span><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><ul><li><p>使用 php 实现冒泡排序, 对象可以是一个数组, 不能使用 php 内置函数<br>挺无聊的, 手写算法题, 直接百度<br><a href="https://stackoverflow.com/a/9001334/6266737">https://stackoverflow.com/a/9001334/6266737</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble_sort</span>(<span class="params"><span class="variable">$arr</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$size</span> = <span class="title function_ invoke__">count</span>(<span class="variable">$arr</span>)-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="variable">$size</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span>&lt;<span class="variable">$size</span>-<span class="variable">$i</span>; <span class="variable">$j</span>++) &#123;</span><br><span class="line">            <span class="variable">$k</span> = <span class="variable">$j</span>+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$arr</span>[<span class="variable">$k</span>] &lt; <span class="variable">$arr</span>[<span class="variable">$j</span>]) &#123;</span><br><span class="line">                <span class="comment">// Swap elements at indices: $j, $k</span></span><br><span class="line">                <span class="keyword">list</span>(<span class="variable">$arr</span>[<span class="variable">$j</span>], <span class="variable">$arr</span>[<span class="variable">$k</span>]) = <span class="keyword">array</span>(<span class="variable">$arr</span>[<span class="variable">$k</span>], <span class="variable">$arr</span>[<span class="variable">$j</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 php 描述顺序查找和二分查找(也叫作折半查找)算法, 顺序查找必须考虑效率, 对象可以是一个有序数组<br>又是手写算法, 继续百度<br><a href="https://gist.github.com/midorikocak/646c59e4042877220ee3a98b371d9c2b">https://gist.github.com/midorikocak/646c59e4042877220ee3a98b371d9c2b</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// This is the text editor interface.</span></span><br><span class="line"><span class="comment">// Anything you type or change here will be seen by the other person in real time. </span></span><br><span class="line"><span class="variable">$array</span> = [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params"><span class="keyword">int</span> <span class="variable">$value</span>, <span class="keyword">array</span> <span class="variable">$array</span>, <span class="keyword">int</span> <span class="variable">$start</span>, <span class="keyword">int</span> <span class="variable">$end</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$end</span>&lt;<span class="variable">$start</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$middle</span> = <span class="title function_ invoke__">floor</span>((<span class="variable">$end</span> + <span class="variable">$start</span>)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$array</span>[<span class="variable">$middle</span>]==<span class="variable">$value</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">elseif</span> (<span class="variable">$array</span>[<span class="variable">$middle</span>] &gt; <span class="variable">$value</span>) <span class="keyword">return</span> <span class="title function_ invoke__">binarySearch</span>(<span class="variable">$value</span>, <span class="variable">$array</span>, <span class="variable">$start</span>, <span class="variable">$middle</span>-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="title function_ invoke__">binarySearch</span>(<span class="variable">$value</span>, <span class="variable">$array</span>, <span class="variable">$middle</span>+<span class="number">1</span>, <span class="variable">$end</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$found</span> = <span class="title function_ invoke__">binarySearch</span>(<span class="number">9</span> ,<span class="variable">$array</span>, <span class="number">0</span>, <span class="title function_ invoke__">sizeof</span>(<span class="variable">$array</span>)-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$found</span>) <span class="keyword">echo</span> <span class="string">&quot;found&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;not found&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>写出查找发帖数最多的十个人名字的 sql 表结构如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">members (id, username, password, post, email)</span><br></pre></td></tr></table></figure><p>终于来了点好玩的了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `username` <span class="keyword">FROM</span> `members` <span class="keyword">ORDER</span> <span class="keyword">BY</span> `post` <span class="keyword">DESC</span> LIMIT <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>在后来的面试过程中面试官询问如果没有 <code>post</code> 字段而是有关联表怎么解决<br>答曰使用连接查询<br>追问有什么问题<br>答曰性能会很差<br>追问怎么解决<br>答曰使用本题的方法, 使用冗余字段 <code>post</code> 来提高性能</p></li><li><p>用过哪些 php 开源框架<br><code>Laravel ThinkPHP</code></p></li><li><p>http 协议里面通过哪些协议字段来控制缓存<br>这个当时没仔细思考, 完全是想到什么写什么, 我当时是这样写的<br><code>cache-control; expire-at; vary; ...</code><br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching">https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching</a><br><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn">https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn</a></p></li><li><p>常见的 web 安全问题有哪些<br>这道题同样只写了我当时想到的:<br><code>SQLi, XSS(XSRF/CSRF)</code><br><a href="https://developer.mozilla.org/en-US/docs/Web/Security">https://developer.mozilla.org/en-US/docs/Web/Security</a></p></li><li><p>使对象可以像数组一样进行 foreach 循环, 要求属性必须是私有<br>这道题当时没答上, 随便写了个 __get<br><a href="http://php.net/manual/zh/language.oop5.iterations.php">http://php.net/manual/zh/language.oop5.iterations.php</a></p></li><li><p>请写一段 php 代码, 确保多个进程同时写入同一个文件成功<br>这道题当时没答上, 随便写了个 lock || 顺序<br>这是多线程的方案, 大同小异<br><a href="https://stackoverflow.com/questions/5663229/php-file-write-threading-issues">https://stackoverflow.com/questions/5663229/php-file-write-threading-issues</a></p></li><li><p>用 php 实现一个双向链表<br>这道题当时没答上, 随便写了个 collections.deque 其实也不对, 双向队列 !&#x3D;&#x3D; 双向链表<br><a href="http://php.net/manual/zh/class.spldoublylinkedlist.php">http://php.net/manual/zh/class.spldoublylinkedlist.php</a></p></li><li><img src="/php%20web%20%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93%20-%201808/idiot_interview.jpg" class="" title="idiot_interview"></li></ul><p>这道题才算符合我的胃口, 我回答了 5 点</p><ol><li>for -&gt; foreach (可读性) 面试官问了性能方面, 没答上<br><a href="https://stackoverflow.com/questions/3430194/performance-of-for-vs-foreach-in-php">https://stackoverflow.com/questions/3430194/performance-of-for-vs-foreach-in-php</a></li><li>通过 <code>unique key</code> 来保证唯一性</li><li>参数绑定</li><li>图中圈出来的部分有慢查询, 面试官似乎还没意识到这里是有问题的 :P</li><li>批量插入, 因为要尽量避免在 <code>foreach</code> 里面写 sql</li></ol><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><p>基本上都是从面试题谈起, 发现占不到便宜之后又开始问简历的一些东西</p><ul><li>做过哪些项目<br>……</li><li>怎么防止 sql 注入<br>参数绑定 + utf8</li><li>……想不起来了, 想起了再补充</li></ul>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;本文总结了这周面试的两家公司所谓心得体会&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 16.04 从 nginx 迁移到 openresty 遇到的坑</title>
    <link href="https://hldh214.github.io/Ubuntu%2016.04%20%E4%BB%8E%20nginx%20%E8%BF%81%E7%A7%BB%E5%88%B0%20openresty%20%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>https://hldh214.github.io/Ubuntu%2016.04%20%E4%BB%8E%20nginx%20%E8%BF%81%E7%A7%BB%E5%88%B0%20openresty%20%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</id>
    <published>2018-06-07T04:41:28.000Z</published>
    <updated>2022-02-07T09:03:13.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>最近项目用到 echo 模块, 不想每次都手动编译 nginx 插件, 寻思着换 openresty 一劳永逸, 便有此文</p><span id="more"></span><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><h2 id="systemd-脚本配置问题"><a href="#systemd-脚本配置问题" class="headerlink" title="systemd 脚本配置问题"></a>systemd 脚本配置问题</h2><p>由于是从已有的 nginx 迁移, 故保留原有的 nginx 的配置, 直接软连接到 openresty</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@vultr:~ # ll /usr/local/openresty/nginx/conf</span><br><span class="line">lrwxrwxrwx 1 root root 10 Jun  3 10:04 /usr/local/openresty/nginx/conf -&gt; /etc/nginx</span><br><span class="line">root@vultr:~ # </span><br></pre></td></tr></table></figure><p>然后就发现 systemctl 命令挂了, start, stop, status 都不起效<br>经过一番考察得知是 systemd 找不到对应 pid 文件导致无法识别<br>遂修改 <code>/lib/systemd/system/openresty.service</code> 文件的 <code>PIDFile</code> 为 <code>/run/nginx.pid</code><br>接着重启守护进程 <code>systemctl daemon-reload</code><br>就解决啦 :P</p><h1 id="refs"><a href="#refs" class="headerlink" title="refs"></a>refs</h1><p><a href="https://www.digitalocean.com/community/tutorials/how-to-use-the-openresty-web-framework-for-nginx-on-ubuntu-16-04">https://www.digitalocean.com/community/tutorials/how-to-use-the-openresty-web-framework-for-nginx-on-ubuntu-16-04</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;最近项目用到 echo 模块, 不想每次都手动编译 nginx 插件, 寻思着换 openresty 一劳永逸, 便有此文&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>微信小游戏-海盗来了打金初体验</title>
    <link href="https://hldh214.github.io/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F-%E6%B5%B7%E7%9B%97%E6%9D%A5%E4%BA%86%E6%89%93%E9%87%91%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://hldh214.github.io/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E6%B8%B8%E6%88%8F-%E6%B5%B7%E7%9B%97%E6%9D%A5%E4%BA%86%E6%89%93%E9%87%91%E5%88%9D%E4%BD%93%E9%AA%8C/</id>
    <published>2018-04-29T14:48:52.000Z</published>
    <updated>2022-02-07T09:03:13.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>假期在家空余时间, 发现微信小游戏突然火了, 群友推荐一款名为: 海盗来了 的小游戏<br>稍微体验了一把感觉很不错, 真正实现了微信对小程序的期望 —- 取代原生 app<br>得益于日益强大的 js 引擎, 在手机端也能做出很华丽的效果, 而且性能也不算很差<br>回到正题: 此款游戏有所谓金币的概念, 而获取金币的一个方式是不断的点击转动转盘<br>寻思如何让脚本来代替我们来干苦力, 便有此文</p><span id="more"></span><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>我首先尝试用 fiddler 对目标进行刺探, 发现所有关键请求均做了 sign 签名机制<br>加入了时间戳来防止重放攻击, 可见通过简单的黑盒测试已经没办法获取更多信息了<br>便考虑从白盒角度来找问题, 而白盒的首要条件是拿到所谓源代码<br>这里我尝试了很多网上的解决方法, 一些说构造 url 进行下载的均以失败告终<br>只好用笨办法, 在 root 过的安卓机上去微信安装目录找小游戏缓存的源代码<br>顺利拿到源代码后就结合前面的一些信息进行继续查找<br>在前面我获得了请求的一些特定的参数 <code>sign</code>, <code>t</code> 等等<br>便以此为关键词全局搜索 js 文件, 找到疑似签名算法的方法, 这里贴一下具体代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    e += <span class="string">&quot;&amp;secret=&quot;</span> + <span class="title class_">InitMark</span>.<span class="property">secret</span>;</span><br><span class="line">    <span class="comment">// 这里的 InitMark.secret 是硬编码在 js 中的</span></span><br><span class="line">    <span class="comment">// e = &quot;clientVer=v2.0.78&amp;isWxGame=true&amp;t=1525007445&amp;secret=418785a803d8e0d9&quot;</span></span><br><span class="line">    <span class="keyword">var</span> t = <span class="string">&quot;&quot;</span></span><br><span class="line">      , i = e.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">    i.<span class="title function_">sort</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; i.<span class="property">length</span>; n++)</span><br><span class="line">        t += i[n];</span><br><span class="line">    <span class="comment">// dictionary order</span></span><br><span class="line">    <span class="comment">// t = &quot;clientVer=v2.0.78isWxGame=truesecret=418785a803d8e0d9t=1525007445&quot;</span></span><br><span class="line">    <span class="number">1e4</span> == <span class="title class_">InitMark</span>.<span class="property">uid</span> &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;data = &quot;</span> + t);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> md5;</span><br><span class="line">    <span class="keyword">return</span> t = a.<span class="title function_">hex_md5</span>(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不难看出是常规的 md5 加密, 快速写出 Python 代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">uid = <span class="string">&#x27;183826980&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_signed_data</span>(<span class="params">data</span>):</span><br><span class="line">    data[<span class="string">&#x27;secret&#x27;</span>] = <span class="string">&#x27;418785a803d8e0d9&#x27;</span></span><br><span class="line">    data[<span class="string">&#x27;isWxGame&#x27;</span>] = <span class="string">&#x27;true&#x27;</span></span><br><span class="line">    data[<span class="string">&#x27;t&#x27;</span>] = <span class="built_in">int</span>(time())</span><br><span class="line">    data[<span class="string">&#x27;sign&#x27;</span>] = md5(<span class="string">&#x27;&#x27;</span>.join([</span><br><span class="line">        <span class="string">&#x27;&#123;0&#125;=&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(index, value) <span class="keyword">for</span> index, value <span class="keyword">in</span> OrderedDict(<span class="built_in">sorted</span>(data.items())).items()</span><br><span class="line">    ]).encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    res = requests.post(<span class="string">&#x27;https://pirate-api.hortor002.com/game/roller/roll&#x27;</span>, get_signed_data(&#123;</span><br><span class="line">        <span class="string">&#x27;uid&#x27;</span>: uid,</span><br><span class="line">        <span class="string">&#x27;bet&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    &#125;)).json()</span><br><span class="line">    <span class="keyword">if</span> res[<span class="string">&#x27;errcode&#x27;</span>] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> res[<span class="string">&#x27;errcode&#x27;</span>] == <span class="number">20005</span>:</span><br><span class="line">            <span class="comment"># 体力透支</span></span><br><span class="line">            exit()</span><br><span class="line">        res = requests.post(<span class="string">&#x27;https://pirate-api.hortor002.com/game/basic/player&#x27;</span>, get_signed_data(&#123;</span><br><span class="line">            <span class="string">&#x27;uid&#x27;</span>: uid</span><br><span class="line">        &#125;)).json()</span><br><span class="line">        <span class="keyword">if</span> res[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;lastRollerType&#x27;</span>] == <span class="number">3</span>:</span><br><span class="line">            <span class="comment"># 找出哪个是土豪</span></span><br><span class="line">            res = requests.post(<span class="string">&#x27;https://pirate-api.hortor002.com/game/pvp/steal&#x27;</span>, get_signed_data(&#123;</span><br><span class="line">                <span class="string">&#x27;uid&#x27;</span>: uid,</span><br><span class="line">                <span class="string">&#x27;idx&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">            &#125;)).json()</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line">        <span class="keyword">elif</span> res[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;lastRollerType&#x27;</span>] == <span class="number">2</span>:</span><br><span class="line">            <span class="comment"># 攻击他人</span></span><br><span class="line">            res = requests.post(<span class="string">&#x27;https://pirate-api.hortor002.com/game/pvp/attack&#x27;</span>, get_signed_data(&#123;</span><br><span class="line">                <span class="string">&#x27;uid&#x27;</span>: uid,</span><br><span class="line">                <span class="string">&#x27;puid&#x27;</span>: <span class="string">&#x27;165330045&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;building&#x27;</span>: <span class="string">&#x27;1&#x27;</span></span><br><span class="line">            &#125;)).json()</span><br><span class="line">            <span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中 <code>uid</code> 是你自己的游戏 id, <code>puid</code> 是你想攻击的小伙伴的游戏 id</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实整个流程并不难, 就是在找签名方法这一步花了很多时间<br>包括各种下断点, 运行, 再下断点, 运行……<br>很享受这种吃透游戏原理的过程 XD</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;假期在家空余时间, 发现微信小游戏突然火了, 群友推荐一款名为: 海盗来了 的小游戏&lt;br&gt;稍微体验了一把感觉很不错, 真正实现了微信对小程序的期望 —- 取代原生 app&lt;br&gt;得益于日益强大的 js 引擎, 在手机端也能做出很华丽的效果, 而且性能也不算很差&lt;br&gt;回到正题: 此款游戏有所谓金币的概念, 而获取金币的一个方式是不断的点击转动转盘&lt;br&gt;寻思如何让脚本来代替我们来干苦力, 便有此文&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>腾讯校招 web 后端开发面试杂记(三)</title>
    <link href="https://hldh214.github.io/%E8%85%BE%E8%AE%AF%E6%A0%A1%E6%8B%9B%20web%20%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0(%E4%B8%89)/"/>
    <id>https://hldh214.github.io/%E8%85%BE%E8%AE%AF%E6%A0%A1%E6%8B%9B%20web%20%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0(%E4%B8%89)/</id>
    <published>2018-04-21T06:22:41.000Z</published>
    <updated>2022-02-07T09:03:13.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>本文包括两部分: 笔试部分真题 和 hr 面杂记</p><h1 id="笔试部分"><a href="#笔试部分" class="headerlink" title="笔试部分"></a>笔试部分</h1><p>2018&#x2F;04&#x2F;05 小雨<br>我参加了腾讯校招线上笔试, 本部分记录笔试中的三道编程题原题</p><span id="more"></span><pre><code>编程题1|20分|翻转数列题目描述:小Q定义了一种数列成为翻转数列;给定整数n和m, 满足n能被2m整除对于一串连续递增整数数列1,2,3,4....每隔m个符号翻转一次最初符号为&#39;-&#39;例如n=8,m=2,数列就是:-1,-2,+3,+4,-5,-6,+7,+8;而n=4, m=1, 数列就是: -1,+2,-3,+4;小Q选拔咋不希望你能帮他算算前n项和为多少.输入描述:输入包括两个整数n和m(2&lt;=n&lt;=10的9次方, 1&lt;=m), 并且满足n能被2m整除.输出描述:输出一个整数, 表示前n项和示例:输入8 2输出8</code></pre><hr><pre><code>编程题2|20分|小Q的歌单题目描述:小Q有X首长度为A的不同的歌和B首长度为Y的不同的歌现在小Q想用这些歌组成一个总长度正好为K的歌单每首歌最多只能在歌单中出现一次在不考虑歌单内歌曲的先后顺序的情况下, 请问有多少种组成歌单的方法输入描述:每隔输入包含一个测试用例.每隔测试用例的第一行包含一个整数, 表示歌单的总长度k(1&lt;=K&lt;=1000).接下来的一行包含四个正整数, 分别表示歌的第一种长度A(A&lt;=10)和数量X(X&lt;=100)以及歌的第二种长度B(B&lt;=10)和数量Y(Y&lt;=100), 保证A不等于B.输出描述:输出一个整数, 表示组成歌单的方法取模, 因为答案可能会很大输出对1000000007取模的结果.示例:输入52 3 3 3输出9</code></pre><hr><pre><code>编程题3|20分|安排机器小Q的公司最近接到m个任务, 第I个任务需要x的时间去完成, 难度等级为yi小Q拥有n台机器, 每台机器最长工作时间zi, 机器等级wi对于一个任务, 他只能交由一台机器来完成, 如果安排给他的机器的最长工作时间小于任务需要的时间则不能完成, 如果完成这个任务将获得200*xi+3*yi收益对于一台机器, 它一天只能完成一个任务, 如果它的机器等级小于安排给他的任务难度等级, 则不能完成小Q像在今天尽可能的去完成任务, 即完成的任务数量最大如果有多种安排方案, 小Q还想找到收益最大的那个方案, 小Q需要你来帮助他计算一下输入描述:输入包括N+M+1行输入的第一行为两个正整数n和m(1&lt;=n, m&lt;=100000), 表示机器的数量和任务的数量.接下来的n行, 每行两个整数xi和yi(0&lt;xi&lt;1000, 0&lt;=yi&lt;=100), 表示每台机器最大工作时间和机器等级.接下来的m行, 每行两个整数zi和wi(0&lt;zi&lt;1000, 0&lt;=wi&lt;=100),表示每个任务需要的完成时间和任务的难度等级.输出描述:输出两个整数, 分别表示最大能完成的任务数量和获取的收益.示例:输入1 2100 3100 2100 1输出1 20006</code></pre><p>其中第一道题提交返回 TLE<br>其他两道题均返回结果不正确(可能是语法错误?)</p><h1 id="hr-面杂记"><a href="#hr-面杂记" class="headerlink" title="hr 面杂记"></a>hr 面杂记</h1><p>2018&#x2F;04&#x2F;19 晴<br>我参加了腾讯校招面试 - hr 面试, 关于初试&#x2F;复试相关请看我以前的文章</p><img src="/%E8%85%BE%E8%AE%AF%E6%A0%A1%E6%8B%9B%20web%20%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0(%E4%B8%89)/waterloo_1.jpg" class="" title="waterloo_1"><img src="/%E8%85%BE%E8%AE%AF%E6%A0%A1%E6%8B%9B%20web%20%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0(%E4%B8%89)/waterloo_2.jpg" class="" title="waterloo_2"><p>因为是人事面, 过程大概用时 15 分钟<br>事先在网上查的人事面攻略也几乎没用上, 基本上都是家常话题, 老实点就好了</p><ul><li>谈一谈你的学习生涯中对你影响最大的事情(这个话题聊得最久, 基本1&#x2F;2的时间都在聊这个)</li><li>你最开始接触计算机&#x2F;程序是因为什么</li><li>你家人支持你吗</li><li>你有考虑考研吗</li><li>常规的户口确认(哪里人, 独生or非独生, 父母亲职业, 情感状况(TuT), 有无亲戚在腾讯……)</li><li>期望工作地点以及原因</li><li>还有没有去其他公司求职</li><li>有什么要问我的</li></ul><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其实我一开始的笔试做的挺烂的, 按照学院风的评判就是不及格, 很惊讶还是被传唤去了面试<br>一路打完三把面试, 听网友讲如果有幸入职, 复试你的面试官就是你的直属 leader<br>现在回想一下还是挺感触的, 那天下午我走进复试面试官房间, 直接注意到一些细节<br>床上的被子是乱的, 那天是下午 4 点面试, 应该是早上酒店阿姨帮忙整理后午休又弄乱了<br>衣服, 书包也是随意的放在旁边的床头柜上<br>再加上面试谈到了我在游戏方面的能力, 面试官饶有兴趣的跟我聊了很久<br>这些都让我觉得很年轻很有活力, 是一只活生生的猿 :P</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;本文包括两部分: 笔试部分真题 和 hr 面杂记&lt;/p&gt;
&lt;h1 id=&quot;笔试部分&quot;&gt;&lt;a href=&quot;#笔试部分&quot; class=&quot;headerlink&quot; title=&quot;笔试部分&quot;&gt;&lt;/a&gt;笔试部分&lt;/h1&gt;&lt;p&gt;2018&amp;#x2F;04&amp;#x2F;05 小雨&lt;br&gt;我参加了腾讯校招线上笔试, 本部分记录笔试中的三道编程题原题&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>腾讯校招 web 后端开发面试杂记(二)</title>
    <link href="https://hldh214.github.io/%E8%85%BE%E8%AE%AF%E6%A0%A1%E6%8B%9B%20web%20%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0(%E4%BA%8C)/"/>
    <id>https://hldh214.github.io/%E8%85%BE%E8%AE%AF%E6%A0%A1%E6%8B%9B%20web%20%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0(%E4%BA%8C)/</id>
    <published>2018-04-19T02:57:06.000Z</published>
    <updated>2022-02-07T09:03:13.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>2018&#x2F;04&#x2F;17 晴<br>我参加了腾讯校招面试 - 复试, 关于初试相关请看我的上一篇文章</p><span id="more"></span><img src="/%E8%85%BE%E8%AE%AF%E6%A0%A1%E6%8B%9B%20web%20%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0(%E4%BA%8C)/sb_csdn.jpg" class="" title="sb_csdn"><h1 id="整体感受"><a href="#整体感受" class="headerlink" title="整体感受"></a>整体感受</h1><p>整体人数变少了, 整个场子诡异的安静<br>值得庆幸的是妹纸仍然占多数, 而且质量也提高了不少, 晃得我有点晕车 XD</p><img src="/%E8%85%BE%E8%AE%AF%E6%A0%A1%E6%8B%9B%20web%20%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E6%9D%82%E8%AE%B0(%E4%BA%8C)/saonima_csdn.jpg" class="" title="saonima_csdn"><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>基本流程和初试一样, 唯一不同的是面试环节, 过程大概用时 35 分钟, 比初试聊得久</p><h2 id="技术细节"><a href="#技术细节" class="headerlink" title="技术细节"></a>技术细节</h2><p>可能是面试官也很喜欢电子游戏的缘故吧, 我们是从游戏辅助脚本聊起的<br>从脚本原理, 游戏规则, 一直聊到一些具体的技术细节(找图 模拟 容错)<br>然后发生了一个小插曲, 面试官浏览我写在简历上的博客, 也就是本博客时<br>看到了我以前写的一些面试心得, 就问我小米武研面试结果怎样<br>我如实回答不乐观, 因为当时面试官出了一道算法题把我 ko 了<br>我对面对面的那种出题因为紧张都发挥不好, 如果让我在寝室一个人也许我也能做出来<br>面试官就笑笑说: 虽然我知道你的情况, 但是今天还是要给你出一道题<br>我连忙说: 没问题, 该走的流程肯定要走, 您说吧<br>其实是 leetcode 上面的一道 easy 题:<br><a href="https://leetcode.com/problems/longest-palindrome/description/">https://leetcode.com/problems/longest-palindrome/description/</a><br>当时我听完题目就想到了最近我做过的一道类似题目:<br><a href="https://leetcode.com/problems/longest-valid-parentheses/description/">https://leetcode.com/problems/longest-valid-parentheses/description/</a><br>我就按照那道题目的解法对这道题进行解答, 快速写出代码提交给面试官<br>面试官疑惑的问我代码的思路是怎样的, 为什么要这样想<br>我回答说我最近做过类似的题目就是这个解法, 所以套用到今天这道题<br>面试官稍稍思索了一下给出了一个反例证明我的算法有错误的可能<br>并且给出了重要的思路提示<br>我一开始还坚持我自己的思路, 寻思着 fix 我的代码来解决这个反例的问题<br>后来发现越写越复杂了, 最后还是按照面试官的提示把这道题算是 pass 了<br>接着面试官问了一些应该算是口水题, 也就是常见的面试题:</p><ul><li>http 协议中 get 和 post 的区别<br>  答: get 有 request parameter 长度限制而 post 没有<br>  当时只答上了这一个, 比较尴尬</li><li>php 的各种框架的区别, 你怎么选择这些框架<br>  答: 我从学习者的角度来说最看重一个框架的社区支持<br>  接着列举了 tp, yii2, laravel 这三个框架, 并粗略讲了一下 laravel 的框架思路与 rails 的异同</li><li>……</li></ul><p>最后面试官问: 你对 Python 这么熟悉为什么你还是想从事 php 方向<br>我回答: 因为 php 可以对公司产生直接效益, 而 Python 没有 php 这么直接方便<br>比如说写 web 方面就是 php 看门本领, Python 主要还是做一些协调的工作<br>面试官追问: Python 也可以写 web 呀<br>我回答: 我更熟悉 php 的这一套运维体系, 而 Python 就 web 这块, 我并不是很熟悉</p><p>面试官问: 你对未来专业方向的规划如何<br>我回答: 因为昨天面试官告诉我了腾讯内部是逐渐废弃 php 而逐渐转向一些新兴语言<br>我未来除了坚持 php 还要学习诸如 go, erlang, rust 等等这些新玩意</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>就在本文写成之时收到了腾讯发来的 hr 面试邀请, 时间是今天 (18&#x2F;04&#x2F;19) 下午<br>在网上也查阅了各种说法, 也许对我而言稳如老狗就是最好的决战精神</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;引子&quot;&gt;&lt;a href=&quot;#引子&quot; class=&quot;headerlink&quot; title=&quot;引子&quot;&gt;&lt;/a&gt;引子&lt;/h1&gt;&lt;p&gt;2018&amp;#x2F;04&amp;#x2F;17 晴&lt;br&gt;我参加了腾讯校招面试 - 复试, 关于初试相关请看我的上一篇文章&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
